{
  "info": {
    "_postman_id": "b85fa610-5468-4439-9748-afa90b3fc934",
    "name": "Classic Endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": ".SAMPLE WORKFLOW: Add Project; Set Permissions; Move Workbook",
      "item": [
        {
          "name": "Authenticate: Sign-in (As an Admin) copy",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "if ( responseCode.code===200)",
                  "{",
                  "    postman.setEnvironmentVariable(\"token\", json.tsResponse.credentials.$.token);",
                  "    postman.setEnvironmentVariable(\"siteId\", json.tsResponse.credentials.site.$.id);",
                  "    postman.setEnvironmentVariable(\"userId\", json.tsResponse.credentials.user.$.id);",
                  "",
                  "",
                  "    tests[\"token env variable set = \" + postman.getEnvironmentVariable(\"token\")] = responseBody.has(\"token\");",
                  "    tests[\"siteId env variable set = \" + postman.getEnvironmentVariable(\"siteId\")] = true;",
                  "    tests[\"userId env variable set = \" + postman.getEnvironmentVariable(\"userId\")] = true;",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  ""
                ],
                "id": "5ca9f0f0-28f7-4e68-a223-7b22468d7863"
              }
            }
          ],
          "_postman_id": "5e93a640-d159-4954-bb62-bee4055d8a6d",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest>\n  <credentials name=\"admin\" password=\"admin\">\n      <site contentUrl=\"\" />\n      </credentials>\n</tsRequest>",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/auth/signin",
            "description": "Signs you in as a user on the specified site on Tableau Server. This call returns an authentication token that you use in subsequent calls to the server.\nBy default, the authentication token is good for 240 minutes. You can change this timeout by using the tabadmin set command and setting the wgserver.session.idle_limit option.\n\n**Note:** The token is valid only for REST API calls. You cannot use the token as authentication for other operations with Tableau Server. In addition, the token is good only for operations in the site that you're signed in to. You cannot sign in to one site and then use the token you get back to send requests to a different site. If you do, the server returns an HTTP 403 (Forbidden) error.\n\nYou can sign in and impersonate a specific user. You might do this if you want manage sign in using a centralized delegation strategy.\n\n**Note:** When you use the REST API, you cannot use SAML single sign-on (SSO), even if the server is configured to use SAML. To sign in, you must pass the user name and password of a user who has been created on the server. You will have the permissions of the Tableau Server user that you're signed in as.\n\nURI\n1. POST /api/api-version/auth/signin\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions."
          },
          "response": []
        },
        {
          "name": "Projects: Create Project copy",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "if (responseCode.code === 201) ",
                  "{",
                  "    postman.setEnvironmentVariable(\"projectId\", json.tsResponse.project.$.id);",
                  "    postman.setEnvironmentVariable(\"projectName\", json.tsResponse.project.$.name);",
                  "",
                  "    tests[\"Created: Project with Name: \" + postman.getEnvironmentVariable(\"projectName\") + \" and Id: \" + postman.getEnvironmentVariable(\"projectId\")] = true;",
                  "",
                  "    tests[\"projectId env variable set = \" + postman.getEnvironmentVariable(\"projectId\")] = true;",
                  "    tests[\"projectName env variable set = \" + postman.getEnvironmentVariable(\"projectName\")] = true;",
                  "    ",
                  "",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "ee35753c-b1f7-4a6f-9ec4-a7d2ad36b6fb"
              }
            }
          ],
          "_postman_id": "e6ce4c24-0c90-45b9-bba3-065f02cc9950",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest> \n  <project name=\"RestAPI Project\"  \n    description=\"A new project created with the REST API\" /> \n</tsRequest>\n",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/projects",
            "description": "Create a new project in a specific site\n\n* project-name  The name to assign to the project.\n* project-description  (Optional) A description for the project.\n* content-permissions  (Optional) Specify LockedToProject to lock permissions so that users cannot overwrite the default permissions set for the project, or specify ManagedByOwner to allow users to manage permissions for content that they own. For more information, see Lock Content Permissions to the Project. The default is ManagedByOwner."
          },
          "response": []
        },
        {
          "name": "Groups: Query Groups copy",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "//Initialize the environment variables if they don't exist",
                  "if (postman.getEnvironmentVariable(\"groupId\")==undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"groupId\", \"notSet\");",
                  "}",
                  "if (postman.getEnvironmentVariable(\"groupName\")==undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"groupName\", \"notSet\");",
                  "}",
                  "",
                  "var error = !(responseCode.code===200)",
                  "if (error){",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "else",
                  "{",
                  "    //These lines have been commented out because they would likely select the Default group and we don't want to accidentally delete that",
                  "    //postman.setEnvironmentVariable(\"groupId\", json.tsResponse.groups.group[0].$.id);",
                  "    //postman.setEnvironmentVariable(\"groupName\", json.tsResponse.groups.group[0].$.name);",
                  "",
                  "    tests[\"Please set the following values MANUALLY to use in subsequent API calls\"] = true",
                  "    tests[\"groupId env variable set = \" + postman.getEnvironmentVariable(\"groupId\")] = !(postman.getEnvironmentVariable(\"groupId\")===\"notSet\");",
                  "    tests[\"groupName env variable set = \" + postman.getEnvironmentVariable(\"groupName\")] = !(postman.getEnvironmentVariable(\"groupId\")===\"notSet\");",
                  "    ",
                  "}",
                  ""
                ],
                "id": "2697acd8-1605-4c40-8e2d-2c36ad459e01"
              }
            }
          ],
          "_postman_id": "d38c02b6-b48f-44e1-a59d-2c8621dd4f6c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/groups/",
            "description": "Returns the list of groups on the specific site, with optional parameters for paging large results"
          },
          "response": []
        },
        {
          "name": "Project Management: Add Project Permissions copy",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "if (responseCode.code===200) {",
                  "    tests[\"Added: Project permissions\"] = true;",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "2aff8f4e-3375-44fc-945d-9569399b5358"
              }
            }
          ],
          "_postman_id": "0cd7d645-e968-4f2d-a339-6dc53fcfa198",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest>\n  <permissions> \n    <project id=\"{{projectId}}\" />\n    <granteeCapabilities>\n      <group id=\"{{groupId}}\" />\n      <capabilities>\n        <capability name=\"read\" mode=\"allow\" />\n      </capabilities>\n    </granteeCapabilities>\n  </permissions>\n</tsRequest>  ",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/projects/{{projectId}}/permissions",
            "description": "Adds permissions to the specified project for a Tableau Server user or group. You can specify multiple sets of permissions using one call.\n\nIf the request body includes a child datasource or <project> element, the request is invalid.\n\nURI\n1. PUT /api/api-version/sites/site-id/projects/project-id/permissions\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the project.\n* project-id  The ID of the project to set permissions for.\n\n\nAttributes\n* user-id  The ID (not name) of the user to add permissions for.\n* group-id  The ID (not name) of the group to add permissions for.\n* capability-name  The capability to assign permissions to. In Tableau Server 10.0, the valid capabilities for a project are ProjectLeader, Read (view), and Write.\nFor more information, see Permissions.\n* capability-mode  Allow to allow the capability, or Deny to deny it. This value is case sensitive."
          },
          "response": []
        },
        {
          "name": "Permissions: Add Default Workbook Permissions copy",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "if (responseCode.code===200) {",
                  "    tests[\"Added: Default permissions\"] = true;",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "4efcea3b-5f0f-4409-a433-5fd18c655748"
              }
            }
          ],
          "_postman_id": "5614cd50-c677-4fc7-bee4-1f0eeb6d3d86",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              },
              {
                "key": "Content-Type",
                "value": "text/xml"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest>\n  <permissions>\n    <granteeCapabilities>\n      <group id=\"{{groupId}}\" />\n      <capabilities>\n        <capability name=\"ExportImage\" mode=\"Allow\" />\n        <capability name=\"Read\" mode=\"Allow\" />\n        <capability name=\"ExportImage\" mode=\"Allow\" />\n        <capability name=\"AddComment\" mode=\"Allow\" />\n        <capability name=\"WebAuthoring\" mode=\"Allow\" />    \n        <capability name=\"Filter\" mode=\"Allow\" />\n      </capabilities>\n    </granteeCapabilities>\n  </permissions>\n</tsRequest>\n",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/projects/{{projectId}}/default-permissions/workbooks",
            "description": "Adds permissions to the specified project that will be applied by default to new workbooks and data sources as they are added to the project. You make separate requests to set default permissions for workbooks and for data sources.\n\nContent owners can override default permissions for their content, but only if project permissions have not been locked. Project permissions can be locked for a new project when you call Create Project or for an existing project by calling Update Project. For more information, see Lock Content Permissions to the Project.\n\nURI\n1. PUT /api/api-version/sites/site-id/projects/project-id/default-permissions/workbooks\n1. PUT /api/api-version/sites/site-id/projects/project-id/default-permissions/datasources\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the project.\n* project-id  The ID of the project to set default permissions for.\n\nAttributes\n* project-id  The <project> element is not required, but can be included. If the <project> element is included, the project-id value must match the project ID in the URI. Any other attributes in the <project> element are ignored.\nuser-id  The ID (not name) of the user to add default permissions for.\n* group-id  The ID (not name) of the group to add permissions for.\n* capability-name  The capability to assign. Valid capabilities for a workbook are\n* AddComment, ChangeHierarchy, ChangePermissions, Delete, ExportData, ExportImage, ExportXml, Filter, Read (view), ShareView, ViewComments, ViewUnderlyingData, WebAuthoring, and Write.\n* Valid capabilities for a data source are ChangePermissions, Connect, Delete, ExportXml, Read (view), and Write.\nFor more information, see Permissions.\n* capability-mode  Allow to allow the capability, or Deny to deny it. This value is case sensitive."
          },
          "response": []
        },
        {
          "name": "Permissions: Add Default Datasource Permissions copy",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "if (responseCode.code===200) {",
                  "    tests[\"Added: Default permissions\"] = true;",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "304b8448-dd48-4d25-b244-666504e7b594"
              }
            }
          ],
          "_postman_id": "29c6b3d1-3137-47ea-9cac-4e0e7964398d",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              },
              {
                "key": "Content-Type",
                "value": "text/xml"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest>\n  <permissions>\n    <granteeCapabilities>\n      <group id=\"{{groupId}}\" />\n      <capabilities>\n        <capability name=\"Connect\" mode=\"Allow\" />\n        <capability name=\"Read\" mode=\"Allow\" />\n      </capabilities>\n    </granteeCapabilities>\n  </permissions>\n</tsRequest>\n",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/projects/{{projectId}}/default-permissions/datasources",
            "description": "Adds permissions to the specified project that will be applied by default to new workbooks and data sources as they are added to the project. You make separate requests to set default permissions for workbooks and for data sources.\n\nContent owners can override default permissions for their content, but only if project permissions have not been locked. Project permissions can be locked for a new project when you call Create Project or for an existing project by calling Update Project. For more information, see Lock Content Permissions to the Project.\n\nURI\n1. PUT /api/api-version/sites/site-id/projects/project-id/default-permissions/workbooks\n1. PUT /api/api-version/sites/site-id/projects/project-id/default-permissions/datasources\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the project.\n* project-id  The ID of the project to set default permissions for.\n\nAttributes\n* project-id  The <project> element is not required, but can be included. If the <project> element is included, the project-id value must match the project ID in the URI. Any other attributes in the <project> element are ignored.\nuser-id  The ID (not name) of the user to add default permissions for.\n* group-id  The ID (not name) of the group to add permissions for.\n* capability-name  The capability to assign. Valid capabilities for a workbook are\n* AddComment, ChangeHierarchy, ChangePermissions, Delete, ExportData, ExportImage, ExportXml, Filter, Read (view), ShareView, ViewComments, ViewUnderlyingData, WebAuthoring, and Write.\n* Valid capabilities for a data source are ChangePermissions, Connect, Delete, ExportXml, Read (view), and Write.\nFor more information, see Permissions.\n* capability-mode  Allow to allow the capability, or Deny to deny it. This value is case sensitive."
          },
          "response": []
        },
        {
          "name": "Workbook Management: Query Workbooks for Site copy",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "//Initialize the environment variables if they don't exist",
                  "if (postman.getEnvironmentVariable(\"workbookId\")===undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"workbookId\", \"notSet\");",
                  "}",
                  "if (postman.getEnvironmentVariable(\"workbookName\")===undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"workbookName\", \"notSet\");",
                  "}",
                  "if (postman.getEnvironmentVariable(\"contentUrl\")===undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"contentUrl\", \"notSet\");",
                  "}",
                  "",
                  "",
                  "var error = (responseCode.code!==200)",
                  "if (error){",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "else",
                  "{",
                  "",
                  "    tests[\"workbookId env variable set = \" + postman.getEnvironmentVariable(\"workbookId\")] = (postman.getEnvironmentVariable(\"workbookId\")!==\"notSet\");",
                  "    tests[\"workbookName env variable set = \" + postman.getEnvironmentVariable(\"workbookName\")] = (postman.getEnvironmentVariable(\"workbookName\")!==\"notSet\");",
                  "    tests[\"contentUrl env variable set = \" + postman.getEnvironmentVariable(\"contentUrl\")] = (postman.getEnvironmentVariable(\"contentUrl\")!==\"notSet\");",
                  "    ",
                  "}",
                  ""
                ],
                "id": "0ea2f338-ce0b-43b3-aafa-311f84adf92d"
              }
            }
          ],
          "_postman_id": "0075dd7c-a605-4064-ae71-6c18bfc960e8",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/workbooks",
            "description": "Returns the workbooks on a site.\nIf the user is not an administrator, the method returns just the workbooks that the user has permissions to view.\n\nURI's\n1. GET /api/api-version/sites/site-id/workbooks\n1. GET /api/api-version/sites/site-id/workbooks?filter=filter-expression\n1. GET /api/api-version/sites/site-id/workbooks?sort=sort-expression\n1. GET /api/api-version/sites/site-id/workbooks?pageSize=page-size&pageNumber=page-number\n\nParameter Values\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the workbooks.\n* filter-expression  (Optional) An expression that lets you specify a subset of workbooks to return. You can filter on predefined fields such as name, tags, and createdAt. You can include multiple filter expressions. For more information, see Filtering and Sorting.\n* sort-expression  (Optional) An expression that lets you specify the order in which workbook information is returned. If you do not specify a sort expression, the sort order of the information that's returned is undefined. For more information, see Filtering and Sorting.\n* page-size  (Optional) The number of items to return in one response. The minimum is 1. The maximum is 1000. The default is 100. For more information, see Paginating Results.\n* page-number  (Optional) The offset for paging. The default is 1. For more information, see Paginating Results.\n"
          },
          "response": []
        },
        {
          "name": "Workbook Management: Update Workbook copy",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "if ( responseCode.code===200)",
                  "{",
                  "",
                  "    tests[\"Updated: Workbook\"] = true;",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  ""
                ],
                "id": "0afad222-b9d3-49c6-bcab-4d44d00f08b0"
              }
            }
          ],
          "_postman_id": "8225d63a-3ddb-4fce-bd0e-a3604fe342be",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest> \n  <workbook showTabs=\"true\" > \n     <project id=\"{{projectId}}\"/> \n </workbook> \n</tsRequest>",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/workbooks/{{workbookId}}",
            "description": "Modifies an existing workbook, allowing you to change the owner or project that the workbook belongs to and whether the workbook shows views in tabs.\n\nURI\n1. PUT /api/api-version/sites/site-id/workbooks/workbook-id\n\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the workbook.\n* workbook-id  The ID of the workbook to update.\n\n\nAttributes\n* show-tabs-flag  (Optional) Specify true to have the published workbook show views in tabs; otherwise, false. The default is false.\n* new-project-id  (Optional) The ID of a project to assign the workbook to.\n* new-owner-id  (Optional) The ID of a user to assign the workbook to as owner.\n \nAny combination of the elements inside the <workbook> element is valid. Only the attributes and child elements that are included result in updates to the data source. If no attributes or nested elements are included, no update is made.\n\nIf the <project> element is included, the id attribute must be included; other attributes of the <project> element are ignored.\n\nIf the <owner> element is included, the id attribute must be included; other attributes of the <owner> element are ignored."
          },
          "response": []
        },
        {
          "name": "Authenticate: Sign Out copy",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code===204)",
                  "{",
                  "    tests[\"Successful signout.\"] = responseCode.code === 204;",
                  "}",
                  "else",
                  "{",
                  "    tests[\"Signout failed. Error: \" + responseBody] = responseCode.code === 204;",
                  "}"
                ],
                "id": "6b359abe-c01b-4356-9564-4b880a716811"
              }
            }
          ],
          "_postman_id": "41dd3604-0d27-433e-8d03-5f5e8c9f7f23",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/auth/signout",
            "description": "Signs you out of the current session. This call invalidates the authentication token that is created by a call to Sign In.\n\nURI\n1. POST /api/api-version/auth/signout\n"
          },
          "response": []
        }
      ],
      "_postman_id": "32f9c172-59d8-4a5c-b6aa-afbf0df8cd8a",
      "description": "Sample workflow to demonstrate:\n\n1. Log in (as Admin)\n1. Add a Project\n1. Add Group to the Project\n1. Add Permissions to the Project\n1. Move a workbook to the new project*\n\n* - You can substitute download/publish instead of move if you want to make a copy.  Postman doesn't deal with multi-part forms, but it could be accomplished in any coding language easily."
    },
    {
      "name": ".SAMPLE WORKFLOW: Create User, Add to Group",
      "item": [
        {
          "name": "Authenticate: Sign-in (As an Admin) copy",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "if ( responseCode.code===200)",
                  "{",
                  "    postman.setEnvironmentVariable(\"token\", json.tsResponse.credentials.$.token);",
                  "    postman.setEnvironmentVariable(\"siteId\", json.tsResponse.credentials.site.$.id);",
                  "    postman.setEnvironmentVariable(\"userId\", json.tsResponse.credentials.user.$.id);",
                  "",
                  "",
                  "    tests[\"token env variable set = \" + postman.getEnvironmentVariable(\"token\")] = responseBody.has(\"token\");",
                  "    tests[\"siteId env variable set = \" + postman.getEnvironmentVariable(\"siteId\")] = true;",
                  "    tests[\"userId env variable set = \" + postman.getEnvironmentVariable(\"userId\")] = true;",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  ""
                ],
                "id": "1cb006f8-8a33-40d8-a7c3-b40dc9248297"
              }
            }
          ],
          "_postman_id": "97143482-27e9-4a57-a06d-f747a6a188e8",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest>\n  <credentials name=\"admin\" password=\"admin\">\n      <site contentUrl=\"\" />\n      </credentials>\n</tsRequest>",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/auth/signin",
            "description": "Signs you in as a user on the specified site on Tableau Server. This call returns an authentication token that you use in subsequent calls to the server.\nBy default, the authentication token is good for 240 minutes. You can change this timeout by using the tabadmin set command and setting the wgserver.session.idle_limit option.\n\n**Note:** The token is valid only for REST API calls. You cannot use the token as authentication for other operations with Tableau Server. In addition, the token is good only for operations in the site that you're signed in to. You cannot sign in to one site and then use the token you get back to send requests to a different site. If you do, the server returns an HTTP 403 (Forbidden) error.\n\nYou can sign in and impersonate a specific user. You might do this if you want manage sign in using a centralized delegation strategy.\n\n**Note:** When you use the REST API, you cannot use SAML single sign-on (SSO), even if the server is configured to use SAML. To sign in, you must pass the user name and password of a user who has been created on the server. You will have the permissions of the Tableau Server user that you're signed in as.\n\nURI\n1. POST /api/api-version/auth/signin\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions."
          },
          "response": []
        },
        {
          "name": "User Management: Add user to site copy",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "//Initialize the environment variables if they don't exist",
                  "if (postman.getEnvironmentVariable(\"userId\")==undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"userId\", \"notSet\");",
                  "}",
                  "if (postman.getEnvironmentVariable(\"userName\")==undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"userName\", \"notSet\");",
                  "}",
                  "",
                  "if (responseCode.code === 201) ",
                  "{",
                  "    postman.setEnvironmentVariable(\"userId\", json.tsResponse.user.$.id);",
                  "    postman.setEnvironmentVariable(\"userName\", json.tsResponse.user.$.name);",
                  "",
                  "    tests[\"Added: user with Name: \" + postman.getEnvironmentVariable(\"userName\") + \" and Id: \" + postman.getEnvironmentVariable(\"userId\")] = true;",
                  "",
                  "    tests[\"userId env variable set = \" + postman.getEnvironmentVariable(\"userId\")] = true;",
                  "    tests[\"userName env variable set = \" + postman.getEnvironmentVariable(\"userName\")] = true;",
                  "    ",
                  "",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "146b909c-c57b-4053-af14-8fcde1c4e6d1"
              }
            }
          ],
          "_postman_id": "71340310-619b-46df-9cff-9f77be6afa45",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-tableau-auth",
                "value": "{{token}}"
              },
              {
                "key": "Content-Type",
                "value": "text/xml"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest>\n  <user name=\"TESTUSER\"\n    siteRole=\"Viewer\" />\n</tsRequest>",
              "options": {
                "raw": {}
              }
            },
            "url": "rgoldin-vm10/api/{{api}}/sites/{{siteId}}/users",
            "description": "Adds a user to Tableau Server and assigns the user to the specified site.\nIf Tableau Server is configured to use local authentication, the information you specify is used to create a new user in Tableau Server. To set a full name, password, and email address for the user, call Update User after creating the user.\nIf Tableau Server is configured to use Active Directory for authentication, the user you specify is imported from Active Directory into Tableau Server.\nIf you try to add a user using a specific site role but you have already reached the limit on the number of licenses for your users, the user is added as an unlicensed user. In that case, the response code is 201 (which indicates success), but the siteRole value in the response body is set to Unlicensed."
          },
          "response": []
        },
        {
          "name": "Groups: Query Groups copy",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "//Initialize the environment variables if they don't exist",
                  "if (postman.getEnvironmentVariable(\"groupId\")==undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"groupId\", \"notSet\");",
                  "}",
                  "if (postman.getEnvironmentVariable(\"groupName\")==undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"groupName\", \"notSet\");",
                  "}",
                  "",
                  "var error = !(responseCode.code===200)",
                  "if (error){",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "else",
                  "{",
                  "    //These lines have been commented out because they would likely select the Default group and we don't want to accidentally delete that",
                  "    //postman.setEnvironmentVariable(\"groupId\", json.tsResponse.groups.group[0].$.id);",
                  "    //postman.setEnvironmentVariable(\"groupName\", json.tsResponse.groups.group[0].$.name);",
                  "",
                  "    tests[\"Please set the following values MANUALLY to use in subsequent API calls\"] = true",
                  "    tests[\"groupId env variable set = \" + postman.getEnvironmentVariable(\"groupId\")] = !(postman.getEnvironmentVariable(\"groupId\")===\"notSet\");",
                  "    tests[\"groupName env variable set = \" + postman.getEnvironmentVariable(\"groupName\")] = !(postman.getEnvironmentVariable(\"groupId\")===\"notSet\");",
                  "    ",
                  "}",
                  ""
                ],
                "id": "2c38f6d1-1258-425c-ab39-73f9b9ffc8a5"
              }
            }
          ],
          "_postman_id": "20eeb337-66a0-4568-bd83-ed1e26d368fb",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/groups/",
            "description": "Returns the list of groups on the specific site, with optional parameters for paging large results"
          },
          "response": []
        },
        {
          "name": "User Management: Get Users in Group copy",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code===200) {",
                  "    tests[\"Users in group retrieved.\"] = true;",
                  "}",
                  "else if (responseCode.code===401) ",
                  "{",
                  "    tests[\"Please sign in.\"] = false;",
                  "}",
                  ""
                ],
                "id": "fe8b2d38-4ed9-4c4b-9c46-07348b7b95f5"
              }
            }
          ],
          "_postman_id": "67af2a70-65d9-4b8e-9860-3fe6f113c655",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/groups/{{groupId}}/users/",
            "description": "List all the users is a specific group\n\nURIs\n1. GET /api/api-version/sites/site-id/groups/group-id/users\n1. GET /api/api-version/sites/site-id/groups/group-id/users?pageSize=page-size&pageNumber=page-number\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the group.\n* group-id  The ID of the group to get the users for.\n* page-size  (Optional) The number of items to return in one response. The minimum is 1. The maximum is 1000. The default is 100. For more information, see Paginating Results.\n* page-number  (Optional) The offset for paging. The default is 1. For more information, see Paginating Results."
          },
          "response": []
        },
        {
          "name": "User Management: Add User to Group copy",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "",
                  "",
                  "if (responseCode.code === 200) ",
                  "{",
                  "    tests[\"Updated: Added users to group : \" + postman.getEnvironmentVariable(\"groupName\") + \" and Id: \" + postman.getEnvironmentVariable(\"groupId\")] = true;",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "4ae2de36-cbb1-46fc-a981-5397a0247ab1"
              }
            }
          ],
          "_postman_id": "633ffb05-472d-4e8f-b310-88123e7f0ce4",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest>\n  <user id=\"{{userId}}\" />\n</tsRequest>",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/groups/{{groupId}}/users",
            "description": "Adds a user to the specified group.\n\n**NOTE: ** \nNote: After you create a resource, the server updates its search index. If you make a query immediately to see a new resource, the query results might not be up to date.\n\nURI\n1. POST /api/api-version/sites/site-id/groups/group-id/users\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the group.\n* group-id  The ID of the group to add the user to."
          },
          "response": []
        },
        {
          "name": "Authenticate: Sign Out copy",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code===204)",
                  "{",
                  "    tests[\"Successful signout.\"] = responseCode.code === 204;",
                  "}",
                  "else",
                  "{",
                  "    tests[\"Signout failed. Error: \" + responseBody] = responseCode.code === 204;",
                  "}"
                ],
                "id": "34df5520-f7bd-4714-91d2-299405996be0"
              }
            }
          ],
          "_postman_id": "ce562177-f0a1-4f62-9c8f-74702eea1051",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/auth/signout",
            "description": "Signs you out of the current session. This call invalidates the authentication token that is created by a call to Sign In.\n\nURI\n1. POST /api/api-version/auth/signout\n"
          },
          "response": []
        }
      ],
      "_postman_id": "40de289c-efeb-4c79-8efb-b694cc7521d9"
    },
    {
      "name": "Authenticate",
      "item": [
        {
          "name": "Authenticate: Sign-in (As an Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const json = xml2Json(responseBody);",
                  "",
                  "if ( responseCode.code===200)",
                  "{",
                  "    pm.environment.set(\"apiKey\", json.tsResponse.credentials.$.token);",
                  "    pm.environment.set(\"siteId\", json.tsResponse.credentials.site.$.id);",
                  "    pm.environment.set(\"userId\", json.tsResponse.credentials.user.$.id);",
                  "",
                  "    tests[\"apiKey env variable set = \" + pm.environment.get(\"apiKey\")] = responseBody.has(\"token\");",
                  "    tests[\"siteId env variable set = \" + pm.environment.get(\"siteId\")] = true;",
                  "    tests[\"userId env variable set = \" + pm.environment.get(\"userId\")] = true;",
                  "}",
                  "",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "id": "b8ece47b-b880-42b8-a2af-f288e567cf8b"
              }
            }
          ],
          "_postman_id": "a795b225-4089-40e2-b9f3-baa99c0243f5",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest>\n    <credentials name=\"{{adminUsername}}\" password=\"{{adminPassword}}\">\n        <site contentUrl=\"{{contentUrl}}\"/>\n    </credentials>\n</tsRequest>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": "{{protocol}}://{{server}}/api/{{api}}/auth/signin",
            "description": "Signs you in as a user on the specified site on Tableau Server. This call returns an authentication token that you use in subsequent calls to the server.\nBy default, the authentication token is good for 240 minutes. You can change this timeout by using the tabadmin set command and setting the wgserver.session.idle_limit option.\n\n**Note:** The token is valid only for REST API calls. You cannot use the token as authentication for other operations with Tableau Server. In addition, the token is good only for operations in the site that you're signed in to. You cannot sign in to one site and then use the token you get back to send requests to a different site. If you do, the server returns an HTTP 403 (Forbidden) error.\n\nYou can sign in and impersonate a specific user. You might do this if you want manage sign in using a centralized delegation strategy.\n\n**Note:** When you use the REST API, you cannot use SAML single sign-on (SSO), even if the server is configured to use SAML. To sign in, you must pass the user name and password of a user who has been created on the server. You will have the permissions of the Tableau Server user that you're signed in as.\n\nURI\n1. POST /api/api-version/auth/signin\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions."
          },
          "response": []
        },
        {
          "name": "Authenticate: Sign-in (As an Admin PAT)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const json = xml2Json(responseBody);",
                  "",
                  "if ( responseCode.code===200)",
                  "{",
                  "    pm.environment.set(\"apiKey\", json.tsResponse.credentials.$.token);",
                  "    pm.environment.set(\"siteId\", json.tsResponse.credentials.site.$.id);",
                  "    pm.environment.set(\"userId\", json.tsResponse.credentials.user.$.id);",
                  "",
                  "    tests[\"apiKey env variable set = \" + pm.environment.get(\"apiKey\")] = responseBody.has(\"token\");",
                  "    tests[\"siteId env variable set = \" + pm.environment.get(\"siteId\")] = true;",
                  "    tests[\"userId env variable set = \" + pm.environment.get(\"userId\")] = true;",
                  "}",
                  "",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "id": "1c3794d5-cafe-405d-9c8e-0210ed31f499"
              }
            }
          ],
          "_postman_id": "2f03f4a0-9d6f-4087-a529-9476691bc5a3",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest>\n    <credentials personalAccessTokenName=\"{{admin-PAT}}\" personalAccessTokenSecret=\"{{admin-PAT-secret}}\">\n        <site contentUrl=\"{{contentUrl}}\"/>\n    </credentials>\n</tsRequest>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": "{{protocol}}://{{server}}/api/{{api}}/auth/signin",
            "description": "Signs you in as a user on the specified site on Tableau Server. This call returns an authentication token that you use in subsequent calls to the server.\nBy default, the authentication token is good for 240 minutes. You can change this timeout by using the tabadmin set command and setting the wgserver.session.idle_limit option.\n\n**Note:** The token is valid only for REST API calls. You cannot use the token as authentication for other operations with Tableau Server. In addition, the token is good only for operations in the site that you're signed in to. You cannot sign in to one site and then use the token you get back to send requests to a different site. If you do, the server returns an HTTP 403 (Forbidden) error.\n\nYou can sign in and impersonate a specific user. You might do this if you want manage sign in using a centralized delegation strategy.\n\n**Note:** When you use the REST API, you cannot use SAML single sign-on (SSO), even if the server is configured to use SAML. To sign in, you must pass the user name and password of a user who has been created on the server. You will have the permissions of the Tableau Server user that you're signed in as.\n\nURI\n1. POST /api/api-version/auth/signin\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions."
          },
          "response": []
        },
        {
          "name": "Authenticate: Sign in (As Tableau User)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const json = xml2Json(responseBody);",
                  "",
                  "if ( responseCode.code===200)",
                  "{",
                  "    pm.environment.set(\"apiKey\", json.tsResponse.credentials.$.token);",
                  "    pm.environment.set(\"siteId\", json.tsResponse.credentials.site.$.id);",
                  "    pm.environment.set(\"userId\", json.tsResponse.credentials.user.$.id);",
                  "",
                  "    tests[\"apiKey env variable set = \" + pm.environment.get(\"apiKey\")] = responseBody.has(\"apiKey\");",
                  "    tests[\"siteId env variable set = \" + pm.environment.get(\"siteId\")] = true;",
                  "    tests[\"userId env variable set = \" + pm.environment.get(\"userId\")] = true;",
                  "",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "id": "97a1726e-5b8d-4930-972a-73bcdba0ae63"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript",
                "id": "ac1b7f37-bd84-435a-9432-1d7ff89c2320"
              }
            }
          ],
          "_postman_id": "4ecc959b-34e2-478b-972d-d2c7c4f6f3cc",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest>\n    <credentials name=\"{{userName}}\" password=\"{{password}}\">\n        <site contentUrl=\"{{contentUrl}}\" />\n    </credentials>\n</tsRequest>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": "{{protocol}}://{{server}}/api/{{api}}/auth/signin",
            "description": "Impersonate a Tableau User"
          },
          "response": []
        },
        {
          "name": "Authenticate: Sign in (Impersonate as Tableau User)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const json = xml2Json(responseBody);",
                  "",
                  "if ( responseCode.code===200)",
                  "{",
                  "    pm.environment.set(\"apiKey\", json.tsResponse.credentials.$.token);",
                  "    pm.environment.set(\"siteId\", json.tsResponse.credentials.site.$.id);",
                  "    pm.environment.set(\"userId\", json.tsResponse.credentials.user.$.id);",
                  "",
                  "    tests[\"apiKey env variable set = \" + pm.environment.get(\"apiKey\")] = responseBody.has(\"apiKey\");",
                  "    tests[\"siteId env variable set = \" + pm.environment.get(\"siteId\")] = true;",
                  "    tests[\"userId env variable set = \" + pm.environment.get(\"userId\")] = true;",
                  "",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "id": "455cc169-3615-451b-b03f-c2e2426ef13e"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript",
                "id": "bed83905-7bb1-4d23-9425-146374308ecb"
              }
            }
          ],
          "_postman_id": "8211dac5-e826-4ff8-b4fc-299040f1a2a7",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest>\n    <credentials name=\"{{adminUsername}}\" password=\"{{adminPassword}}\">\n        <site contentUrl=\"{{contentUrl}}\" />\n        <user id=\"{{userId}}\"/>\n    </credentials>\n</tsRequest>",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": "{{protocol}}://{{server}}/api/{{api}}/auth/signin",
            "description": "Impersonate a Tableau User"
          },
          "response": []
        },
        {
          "name": "Authenticate: Sign Out",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "",
                  "if (responseCode.code===204)",
                  "{",
                  "    tests[\"Successful signout.\"] = responseCode.code === 204;",
                  "}",
                  "else",
                  "{",
                  "    tests[\"Signout failed. Error: \" + responseBody] = responseCode.code === 204;",
                  "}"
                ],
                "type": "text/javascript",
                "id": "edcc64f0-9ab2-4cb9-b6c9-05a79c05584c"
              }
            }
          ],
          "_postman_id": "df91c34e-10f8-47ed-8968-2782fb936512",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{apiKey}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {}
              }
            },
            "url": "{{protocol}}://{{server}}/api/{{api}}/auth/signout",
            "description": "Signs you out of the current session. This call invalidates the authentication token that is created by a call to Sign In.\n\nURI\n1. POST /api/api-version/auth/signout\n"
          },
          "response": []
        }
      ],
      "_postman_id": "9c59e6b9-43e8-4353-8830-78fed06ac7cb",
      "auth": {
        "type": "noauth"
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              ""
            ],
            "id": "a49961e0-e93a-4f18-9448-de1fd2db7dcd"
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              ""
            ],
            "id": "9a349dac-9671-4bcb-b916-95dfdc80d4be"
          }
        }
      ]
    },
    {
      "name": "DataSource",
      "item": [
        {
          "name": "Datasources: Query Datasources",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "//Initialize the environment variables if they don't exist",
                  "if (postman.getEnvironmentVariable(\"datasourceId\")===undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"datasourceId\", \"notSet\");",
                  "}",
                  "if (postman.getEnvironmentVariable(\"datasourceName\")===undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"datasourceName\", \"notSet\");",
                  "}",
                  "",
                  "var error = (responseCode.code!==200)",
                  "if (error){",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "else",
                  "{",
                  "    //These lines have been commented out because they would likely select the Default datasource and we don't want to accidentally delete that",
                  "    //postman.setEnvironmentVariable(\"datasourceId\", json.tsResponse.datasources.datasource[0].$.id);",
                  "    //postman.setEnvironmentVariable(\"datasourceName\", json.tsResponse.datasources.datasource[0].$.name);",
                  "",
                  "    tests[\"Please set the following values MANUALLY to use in subsequent API calls\"] = true",
                  "    tests[\"datasourceId env variable set = \" + postman.getEnvironmentVariable(\"datasourceId\")] = (postman.getEnvironmentVariable(\"datasourceId\")!==\"notSet\");",
                  "    tests[\"datasourceName env variable set = \" + postman.getEnvironmentVariable(\"datasourceName\")] = (postman.getEnvironmentVariable(\"datasourceName\")!==\"notSet\");",
                  "    ",
                  "}",
                  ""
                ],
                "id": "902b3cef-e626-4a24-8247-b8136bc72517"
              }
            }
          ],
          "_postman_id": "206d65df-2628-43b3-8dd9-3cfd78b216b1",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/datasources",
            "description": "Returns a list of data sources on the specified site, with optional parameters for specifying the paging of large results.\n\n**Note:** After you create a resource, the server updates its search index. If you make a query immediately to see a new resource, the query results might not be up to date.\n\nURI\n1. GET /api/api-version/sites/site-id/datasources\n1. GET /api/api-version/sites/site-id/datasources?pageSize=page-size&pageNumber=page-number\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the data sources.\n* page-size  (Optional) The number of items to return in one response. The minimum is 1. The maximum is 1000. The default is 100. For more information, see Paginating Results.\n* page-number  (Optional) The offset for paging. The default is 1. For more information, see Paginating Results."
          },
          "response": []
        },
        {
          "name": "Datasources: Query Datasource",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "//Initialize the environment variables if they don't exist",
                  "if (postman.getEnvironmentVariable(\"datasourceId\")==undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"datasourceId\", \"notSet\");",
                  "}",
                  "",
                  "var error = !(responseCode.code===200)",
                  "if (error){",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "else",
                  "{",
                  "",
                  "    tests[\"datasourceId env variable set = \" + postman.getEnvironmentVariable(\"datasourceId\")] = (postman.getEnvironmentVariable(\"datasourceId\")!==\"notSet\");",
                  "        tests[\"datasourceName env variable set = \" + postman.getEnvironmentVariable(\"datasourceName\")] = (postman.getEnvironmentVariable(\"datasourceName\")!==\"notSet\");",
                  "   ",
                  "    ",
                  "}",
                  ""
                ],
                "id": "cf79f01f-5bfc-4d58-90b1-1bb5dc828daa"
              }
            }
          ],
          "_postman_id": "448276fb-64c5-4ab2-9699-19386b0aefbc",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/datasources/{{datasourceId}}",
            "description": "Returns information about the specified data source.\n\nURI\n1. GET /api/api-version/sites/site-id/datasources/datasource-id\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The site that contains the data source.\n* datasource-id  The ID of the data source to get."
          },
          "response": []
        },
        {
          "name": "Datasources: Delete Datasource",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "if (responseCode.code == 204) {",
                  "    tests[\"Deleted: Datasource with name (if set): \" + postman.getEnvironmentVariable(\"datasourceName\") + \" and Id: \" + postman.getEnvironmentVariable(\"datasourceId\") ] = true;",
                  "    postman.setEnvironmentVariable(\"datasourceId\", \"notSet\");",
                  "    postman.setEnvironmentVariable(\"datasourceName\", \"notSet\");    ",
                  "    tests[\"datasourceId env variable set = \" + postman.getEnvironmentVariable(\"datasourceId\")] = !(postman.getEnvironmentVariable(\"revisionId\")!==\"notSet\");",
                  "    tests[\"revisionName env variable set = \" + postman.getEnvironmentVariable(\"datasourceName\")] = !(postman.getEnvironmentVariable(\"datasourceName\")!==\"notSet\");",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "d90cb9db-f1bc-4fe2-b362-043c37f01a4e"
              }
            }
          ],
          "_postman_id": "93e34b92-6bb7-4345-b439-158767d861ff",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/datasources/{{datasourceId}}",
            "description": "Deletes the specified Datasource"
          },
          "response": []
        },
        {
          "name": "Datasources: Download Datasource",
          "_postman_id": "d5616102-7053-4e92-b727-3ce3b5324735",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/datasources/{{datasourceId}}/content",
            "description": "Downloads the specified Datasource. WARNING: Don't try to download a tdsx with POSTman. It will crash. Try downloading a tds that doesn't have a local file attached with it.\n"
          },
          "response": []
        },
        {
          "name": "Datasources: Update DataSource",
          "_postman_id": "e04208b0-9cd5-4ec5-886b-3346b50ba22f",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest> \n  <datasource> \n     <project id=\"{{projectId}}\"/> \n     <owner id=\"{{userId}}\" />\n </datasource> \n</tsRequest>",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/datasources/{{datasourceId}}",
            "description": "Update the DataSource's Project or Owner\n\nURI\n1. PUT /api/api-version/sites/site-id/datasources/datasource-id\n\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the data source.\n* datasource-id  The ID of the data source to update.\n\nAttributes\n* new-project-id  (Optional) The ID of a project to add the data source to.\n* new-owner-id    (Optional) The ID of a user to assign the data source to as owner.\n"
          },
          "response": []
        },
        {
          "name": "Datasources: Update DataSource Connection",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "//Initialize the environment variables if they don't exist",
                  "if (postman.getEnvironmentVariable(\"connectionId\")==undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"connectionId\", \"notSet\");",
                  "}",
                  "",
                  "",
                  "var error = !(responseCode.code===200)",
                  "if (error){",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "else",
                  "{",
                  "    postman.setEnvironmentVariable(\"connectionId\", json.tsResponse.connection.$.id);",
                  "    tests[\"connectionId env variable set = \" + postman.getEnvironmentVariable(\"connectionId\")] = !(postman.getEnvironmentVariable(\"connectionId\")===\"notSet\");",
                  "}",
                  ""
                ],
                "id": "772474bf-5917-4192-8423-57cbec0f17c5"
              }
            }
          ],
          "_postman_id": "caf781fa-1517-4f92-8db0-09027ea85160",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest>\n  <connection serverAddress=\"newAddr\" serverPort=\"5435\" userName=\"newUserName\" password=\"newPass\" />\n</tsRequest>",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/datasources/{{datasourceId}}/connection",
            "description": "Modify the serverAddress, serverPort, userName, and/or password for a specific data connection on a specific datasources\n\nURI\n1. PUT /api/api-version/sites/site-id/datasources/datasource-id/connections/connection-id\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the data source.\n* datasource-id  The ID of the data source to update.\n* connection-id  The ID of the connection to update. To determine what connections are available for for a data source, call Query Datasource Connections.\n\n\nAttributes\n* server-address  The new server for the connection.\n* port  The new port for the connection\nconnection-username  The new username for the connection.\n* connection-password  The new password for the connection.\n* embed-password  True to embed the password; otherwise, False."
          },
          "response": []
        },
        {
          "name": "Datasources: Query Datasource Connection",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "//tests[\"XML = \" + responseBody] = true;",
                  "//tests[\"xml2Json = \" + xml2Json(responseBody)] = true;",
                  "//tests[\"stringify = \"+ JSON.stringify(xml)] = true;",
                  "//tests[\"json.credentials = \" + json.tsResponse.credentials.$.token] = true; ",
                  "if ( responseCode.code===200)",
                  "{",
                  "",
                  "    postman.setEnvironmentVariable(\"connectionId\", json.tsResponse.connections.connection.$.id);",
                  "    tests[\"connectionId env variable set = \" + postman.getEnvironmentVariable(\"connectionId\")] = true;",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  ""
                ],
                "id": "c210a337-bbb3-4db6-8e83-0b8928ee802a"
              }
            }
          ],
          "_postman_id": "58d6434e-0b00-4d3c-8d92-a4133a84f264",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/datasources/{{datasourceId}}/connections",
            "description": "Query DataSource connection information\n\nURI\n1. GET /api/api-version/sites/site-id/datasources/datasource-id/connections\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the data source.\n* datasource-id  The ID of the datasource to return connection information about."
          },
          "response": []
        }
      ],
      "_postman_id": "4d244c64-dae4-47b6-ba55-6f5569408c5e"
    },
    {
      "name": "DataSource Permissions",
      "item": [
        {
          "name": "Workbook Management: Add Datasource Permissions",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "if (responseCode.code===200) {",
                  "    tests[\"Added: Datasource permission\"] = true;",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "a70999e8-0855-418e-8397-921d8248688b"
              }
            }
          ],
          "_postman_id": "20b1cde6-5832-418e-819b-45a631f3da68",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest>\n  <permissions> \n    <datasource id=\"{{datasourceId}}\" />\n    <granteeCapabilities>\n      <user id=\"{{userId}}\" />\n      <capabilities>\n        <capability name=\"write\" mode=\"allow\" />\n      </capabilities>\n    </granteeCapabilities>\n  </permissions>\n</tsRequest>  ",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/datasources/{{datasourceId}}/permissions",
            "description": "Adds permissions to the specified data source for a Tableau Server user or group. You can specify multiple sets of permissions using one call.\n\nIf a specified permission has already been granted or denied for a given user or group, the system ignores it.\n\nIf the request body includes a child workbook or <project> element, the request is invalid.\n\nURI\n1. PUT /api/api-version/sites/site-id/datasources/datasource-id/permissions\n\nAttributes\n* datasource-id  The <datasource> element is not required, but can be included for compatibility with earlier versions of the REST API. If the <datasource> element is included, the datasource-id value must match the data source ID in the URI. Any other attributes in the <datasource> element are ignored.\n* user-id  The ID (not name) of the user to add permissions for.\n* group-id  The ID (not name) of the group to add permissions for.\n* capability-name  The capability to assign. For valid capabilities for a data source project are ChangePermissions, Connect, Delete, ExportXml, Read (view), and Write.\nFor more information, see Permissions.\n* capability-mode  Allow to allow the capability, or Deny to deny it. This value is case sensitive."
          },
          "response": []
        },
        {
          "name": "Workbook Management: Query Datasource Permissions",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "if (responseCode.code===200) {",
                  "    tests[\"Updated: Datasource permission\"] = true;",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "fe3fdebb-0f7a-4d66-80a0-758b062b8f9f"
              }
            }
          ],
          "_postman_id": "2f959bbc-b0cf-492c-9f0d-af098decc7c6",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/datasources/{{datasourceId}}/permissions",
            "description": "Returns a list of permissions for a specific data source.\n\nURI\n1. GET /api/api-version/sites/site-id/datasources/datasource-id/permissions\n\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the data source.\n* datasource-id  The ID of the data source to get permissions for.\n\n"
          },
          "response": []
        },
        {
          "name": "Workbook Management: Delete Datasource Permission",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "if (responseCode.code === 204) ",
                  "{",
                  "    tests[\"Deleted: Datasource permission \"] = true;",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "446c30d4-1f4b-46ba-a5f1-fb7247d8bc4d"
              }
            }
          ],
          "_postman_id": "d717e70c-8cac-4491-9483-8e1a13d0b297",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/datasources/{{datasourceId}}/permissions/users/{{userId}}/write/allow",
            "description": "Removes the specified data source permission for the specified group or user.\n\nURI\n1. DELETE /api/api-version/sites/site-id/datasources/datasource-id/permissions/groups/group-id/capability-name/capability-mode\n1. DELETE /api/api-version/sites/site-id/datasources/datasource-id/permissions/users/user-id/capability-name/capability-mode\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the data source.\n* datasource-id  The ID of the data source to remove the permission for.\n*group-id  The ID of the group to remove the permission for.\n* user-id  The ID of the user to remove the permission for.\n* capability-name  \nThe capability to remove the permission for. Valid capabilities for a data source are ChangePermissions, Connect, Delete, ExportXml, Read (view), and Write.\nFor more information, see Permissions.\n* capability-mode  Allow to remove the allow permission, or Deny to remove the deny permission. This value is case sensitive."
          },
          "response": []
        }
      ],
      "_postman_id": "06039a0e-c10f-4a93-9db4-937ced3dd8eb"
    },
    {
      "name": "Favorites",
      "item": [
        {
          "name": "Favorites: Add Datasource to Favorites",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "",
                  "",
                  "if (responseCode.code === 200) ",
                  "{",
                  "",
                  "",
                  "    tests[\"Added: Datasource favorite \"] = true;",
                  "",
                  "",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "120cbf77-dfe3-4e1c-9bf1-733d422df351"
              }
            }
          ],
          "_postman_id": "25102ad0-d5db-4cf8-9f96-e5d455cc0bc9",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              },
              {
                "key": "Content-Type",
                "value": "text/xml"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest> \n  <favorite label=\"Favorite datasource added by REST API\"> \n    <datasource id=\"{{datasourceId}}\" /> \n  </favorite> \n</tsRequest>",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/favorites/{{userId}}",
            "description": "Adds the specified data source to the user's favorites.\n\nIf the user already has the data source listed as a favorite with the same label, the operation has no effect. If the label differs, the original favorite is overwritten.\n\n\nURI\n1. PUT /api/api-version/sites/site-id/favorites/user-id\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site to create the subscription in.\n* user-id  The ID of the user to add the favorite for.\n\nAttributes\n* \nfavorite-label  A label to assign to the favorite. This value is displayed when you search for favorites on the server.\n* datasource-id  The ID of the data source to add as a favorite."
          },
          "response": []
        },
        {
          "name": "Favorites: Delete Datasource from Favorites",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "",
                  "",
                  "if (responseCode.code === 204) ",
                  "{",
                  "",
                  "",
                  "    tests[\"Deleted: Datasource favorite \"] = true;",
                  "",
                  "",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "470d787a-948d-4d36-a530-851dde513495"
              }
            }
          ],
          "_postman_id": "08f82b0a-c57c-4b81-8a23-3a4313957956",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              },
              {
                "key": "Content-Type",
                "value": "text/xml"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest>\n  <subscription subject=\"subscription-subject\">\n    <content type=\"workbook\" id=\"{{workbookId}}\"  />\n    <schedule id=\"{{scheduleId}}\" />\n    <user id=\"{{userId}}\" />\n  </subscription>\n</tsRequest>",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/favorites/{{userId}}/datasources/{{datasourceId}}",
            "description": "Deletes the specified data source from the user's favorites. If the specified data source is not a favorite, the operation has no effect.\n\n\nURI\n1. DELETE /api/api-version/sites/site-id/favorites/user-id/datasources/datasource-id\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site to create the subscription in.\n* user-id  The ID of the user to add the favorite for.\n* datasource-id  The ID of the data source to remove from the user's favorites.\n"
          },
          "response": []
        },
        {
          "name": "Favorites: Add View to Favorites",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "",
                  "",
                  "if (responseCode.code === 200) ",
                  "{",
                  "",
                  "",
                  "    tests[\"Added: View to favorite \"] = true;",
                  "",
                  "",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "282d895e-36e4-4977-a2b8-2209a71c0e2e"
              }
            }
          ],
          "_postman_id": "de846ba3-436b-4909-a8a7-519ffad73487",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              },
              {
                "key": "Content-Type",
                "value": "text/xml"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest> \n  <favorite label=\"Favorite VIEW added by REST API\"> \n    <view id=\"{{datasourceId}}\" /> \n  </favorite> \n</tsRequest>",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/favorites/{{userId}}",
            "description": "Adds the specified view to a user's favorites.\n\nIf the user already has the view listed as a favorite with the same label, the operation has no effect. If the label differs, the original favorite is overwritten.\n\n\nURI\n1. PUT /api/api-version/sites/site-id/favorites/user-id\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site to create the subscription in.\n* user-id  The ID of the user to add the favorite for.\n\nAttributes\n* \nfavorite-label  A label to assign to the favorite. This value is displayed when you search for favorites on the server.\n* view-id  The ID (not name) of the view to add as a favorite."
          },
          "response": []
        },
        {
          "name": "Favorites: Delete View from Favorites",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "",
                  "",
                  "if (responseCode.code === 204) ",
                  "{",
                  "",
                  "",
                  "    tests[\"Deleted: View favorite \"] = true;",
                  "",
                  "",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "f918e271-2110-4454-8ec4-2aa5681e0719"
              }
            }
          ],
          "_postman_id": "7c4f3d7e-0483-4b2d-a826-f9fbb5436bfa",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "\n\n",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/favorites/{{userId}}/views/{{viewId}}",
            "description": "Deletes a view from the user's favorites list."
          },
          "response": []
        },
        {
          "name": "Favorites: Add Workbook to Favorites",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "",
                  "",
                  "if (responseCode.code === 200) ",
                  "{",
                  "",
                  "",
                  "    tests[\"Added: Workbook favorite \"] = true;",
                  "",
                  "",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "477ec824-b39f-4a8b-9d00-025745b97905"
              }
            }
          ],
          "_postman_id": "acbf412f-ae74-44ed-87b3-f5007488f3ef",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest> \n  <favorite label=\"I was Favorited by REST\"> \n    <workbook id=\"{{workbookId}}\" /> \n  </favorite> \n</tsRequest>\n\n",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/favorites/{{userId}}",
            "description": "Add a workbook to the favorites list of a user"
          },
          "response": []
        },
        {
          "name": "Favorites: Delete Workbook from Favorites",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "",
                  "",
                  "if (responseCode.code === 204) ",
                  "{",
                  "",
                  "",
                  "    tests[\"Deleted: Workbook favorite \"] = true;",
                  "",
                  "",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "f8b735f6-037e-409e-9ae2-c0b7497c9abf"
              }
            }
          ],
          "_postman_id": "f051eec1-b8ff-4d1b-a47f-ee895c6d2e09",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "\n\n",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/favorites/{{userId}}/workbooks/{{workbookId}}",
            "description": "Delete a workbook to the favorites list of a user"
          },
          "response": []
        }
      ],
      "_postman_id": "84e987a3-7b77-4388-8e1c-b4e63f99b00d"
    },
    {
      "name": "Groups",
      "item": [
        {
          "name": "Groups: Create Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "",
                  "",
                  "if (responseCode.code === 201) ",
                  "{",
                  "    postman.setEnvironmentVariable(\"groupId\", json.tsResponse.group.$.id);",
                  "    postman.setEnvironmentVariable(\"groupName\", json.tsResponse.group.$.name);",
                  "",
                  "    tests[\"Added: group with Name: \" + postman.getEnvironmentVariable(\"groupName\") + \" and Id: \" + postman.getEnvironmentVariable(\"groupId\")] = true;",
                  "",
                  "    tests[\"groupId env variable set = \" + postman.getEnvironmentVariable(\"groupId\")] = true;",
                  "    tests[\"groupName env variable set = \" + postman.getEnvironmentVariable(\"groupName\")] = true;",
                  "    ",
                  "",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "57ba5339-36d6-4cdc-8fef-76aaf8b45656"
              }
            }
          ],
          "_postman_id": "a18c8d06-d231-4f3c-baf4-9f68afee5f10",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest>\n  <group name=\"myNewGroup\" />\n</tsRequest>",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/groups/"
          },
          "response": []
        },
        {
          "name": "Groups: Query Groups",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "//Initialize the environment variables if they don't exist",
                  "if (postman.getEnvironmentVariable(\"groupId\")==undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"groupId\", \"notSet\");",
                  "}",
                  "if (postman.getEnvironmentVariable(\"groupName\")==undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"groupName\", \"notSet\");",
                  "}",
                  "",
                  "var error = !(responseCode.code===200)",
                  "if (error){",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "else",
                  "{",
                  "    //These lines have been commented out because they would likely select the Default group and we don't want to accidentally delete that",
                  "    //postman.setEnvironmentVariable(\"groupId\", json.tsResponse.groups.group[0].$.id);",
                  "    //postman.setEnvironmentVariable(\"groupName\", json.tsResponse.groups.group[0].$.name);",
                  "",
                  "    tests[\"Please set the following values MANUALLY to use in subsequent API calls\"] = true",
                  "    tests[\"groupId env variable set = \" + postman.getEnvironmentVariable(\"groupId\")] = !(postman.getEnvironmentVariable(\"groupId\")===\"notSet\");",
                  "    tests[\"groupName env variable set = \" + postman.getEnvironmentVariable(\"groupName\")] = !(postman.getEnvironmentVariable(\"groupId\")===\"notSet\");",
                  "    ",
                  "}",
                  ""
                ],
                "id": "26551da7-26c5-4a2c-90e0-c84c8594caca"
              }
            }
          ],
          "_postman_id": "38ec9d75-46ba-4d9b-9309-f38ae29a8c05",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/groups/",
            "description": "Returns the list of groups on the specific site, with optional parameters for paging large results"
          },
          "response": []
        },
        {
          "name": "Groups: Update Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "",
                  "",
                  "if (responseCode.code === 200) ",
                  "{",
                  "    postman.setEnvironmentVariable(\"groupName\", json.tsResponse.group.$.name);",
                  "",
                  "    tests[\"Updated: group with Name: \" + postman.getEnvironmentVariable(\"groupName\") + \" and Id: \" + postman.getEnvironmentVariable(\"groupId\")] = true;",
                  "",
                  "    tests[\"groupId env variable set = \" + postman.getEnvironmentVariable(\"groupId\")] = true;",
                  "    tests[\"groupName env variable set = \" + postman.getEnvironmentVariable(\"groupName\")] = true;",
                  "    ",
                  "",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "42ec51d9-d360-4cc2-8008-8f5e2e5a2ca5"
              }
            }
          ],
          "_postman_id": "342ee5ad-a94e-4f4d-8c85-074e4b786036",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest>\n  <group name=\"updatedGroupName\" />\n</tsRequest>",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/groups/{{groupId}}",
            "description": "Updates a group in Tableau Server.\n\nIf the server is configured to use local authentication, the method lets you update the group name. If the server is configured to use Active Directory authentication, the method synchronizes the Tableau Server group with Active Directory.\n\nDuring synchronization, the method updates the group in Tableau Server and modifies the set of users in the group to be the same as those in Active Directory. Users in Active Directory that are not in the group on Tableau Server are added to the group, and users in Tableau Server that are not in the Active Directory group are removed from the Tableau Server group. Users that are no longer in Active Directory at all are unlicensed.\n\nIf the update synchronizes with Active Directory, Tableau Server can perform the update either immediately (synchronously) or by using a background job (asynchronously). If Active Directory contains a large number of users, you should perform the synchronization process as a background job so that the process doesn't time out. By default, synchronizing with Active Directory is performed as a background job (asynchronously).\n\nURI\n1. PUT /api/api-version/sites/site-id/groups/group-id\n1. PUT /api/api-version/sites/site-id/groups/group-id?asJob=background-task\n\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the group.\n* group-id  The ID of the group to update.\n* background-task  true to synchronize with Active Directory as a background task, or false to synchronize immediately (synchronously). The default is true.  **Note: This parameter has no effect if the server is configured to use local authentication.**"
          },
          "response": []
        },
        {
          "name": "Groups: Delete Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "if (responseCode.code == 204) {",
                  "    tests[\"Deleted: group with name: \" + postman.getEnvironmentVariable(\"groupName\") + \" and Id: \" + postman.getEnvironmentVariable(\"groupId\") ] = true;",
                  "    postman.setEnvironmentVariable(\"groupId\", \"notSet\");",
                  "    postman.setEnvironmentVariable(\"groupName\", \"notSet\");  ",
                  "    tests[\"groupId env variable set = \" + postman.getEnvironmentVariable(\"groupId\")] = !(postman.getEnvironmentVariable(\"groupId\")===\"notSet\");",
                  "    tests[\"groupName env variable set = \" + postman.getEnvironmentVariable(\"groupName\")] = !(postman.getEnvironmentVariable(\"groupName\")===\"notSet\");",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  ""
                ],
                "id": "d9a85e96-48e2-4ab2-a4d5-3034df3dd3e1"
              }
            }
          ],
          "_postman_id": "7cde60db-6beb-4241-bf3a-79d703612371",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest>\n  <group name=\"myNewGroup1\" />\n</tsRequest>",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/groups/{{groupId}}",
            "description": "Deletes the group on a specific site. Deleting a group does not delete the users in group, but users are no longer members of the group. Any permissions that were previously assigned to the group no longer apply.\n\nURI\n1. DELETE /api/api-version/sites/site-id/groups/group-id\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the project.\n* group-id  The ID of the group to delete."
          },
          "response": []
        }
      ],
      "_postman_id": "081273aa-854e-4964-8109-9e12577feb6e"
    },
    {
      "name": "Jobs",
      "item": [
        {
          "name": "Jobs: Query Job",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "//Initialize the environment variables if they don't exist",
                  "if (postman.getEnvironmentVariable(\"jobId\")==undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"jobId\", \"notSet\");",
                  "}",
                  "if (postman.getEnvironmentVariable(\"jobName\")==undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"jobName\", \"notSet\");",
                  "}",
                  "",
                  "var error = !(responseCode.code===200)",
                  "if (error){",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "else",
                  "{",
                  "    //These lines have been commented out because they would likely select the Default job and we don't want to accidentally delete that",
                  "    //postman.setEnvironmentVariable(\"jobId\", json.tsResponse.jobs.job[0].$.id);",
                  "    //postman.setEnvironmentVariable(\"jobName\", json.tsResponse.jobs.job[0].$.name);",
                  "",
                  "    tests[\"Please set the following values MANUALLY to use in subsequent API calls\"] = true",
                  "    tests[\"jobId env variable set = \" + postman.getEnvironmentVariable(\"jobId\")] = (postman.getEnvironmentVariable(\"jobId\")===\"notSet\");",
                  "    tests[\"jobName env variable set = \" + postman.getEnvironmentVariable(\"jobName\")] = (postman.getEnvironmentVariable(\"jobId\")!==\"notSet\");",
                  "    ",
                  "}",
                  ""
                ],
                "id": "a404215b-1b4f-4cd1-bb93-0a725b6b117a"
              }
            }
          ],
          "_postman_id": "752888d8-e9f7-453c-83c3-ec12aade5b8c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/jobs/{{jobId}}",
            "description": "Returns status information about an asynchronous process. Jobs can be used to import users from Active Directory (the result of a call to Create Group) or synchronize an existing Tableau Server group with Active Directory (the result of a call to Update Group).\n\n\n1. GET /api/api-version/sites/site-id/jobs/job-id\n\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the projects.\n* job-id  The ID of the job to get status information for."
          },
          "response": []
        }
      ],
      "_postman_id": "41168ea2-0576-451b-afa4-72b46e45d838"
    },
    {
      "name": "Permissions (Default)",
      "item": [
        {
          "name": "Permissions: Query Default Permissions",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "if (responseCode.code===200) {",
                  "    tests[\"Default permissions retrieved\"] = true;",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "83958538-787a-42a2-8279-5536ec6cf9d6"
              }
            }
          ],
          "_postman_id": "32db0366-5f54-40a4-9734-9f23d0698608",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/projects/{{projectId}}/default-permissions/datasources",
            "description": "Returns information about the default permissions for a project—that is, the permissions that will be set by default for workbooks and data sources that are added to the project. You make separate requests to query the default permissions for workbooks and for data sources.\n\nURI\n1. GET /api/api-version/sites/site-id/projects/project-id/default-permissions/datasources\n1. GET /api/api-version/sites/site-id/projects/project-id/default-permissions/workbooks\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the project.\n* project-id  The project to get permissions for."
          },
          "response": []
        },
        {
          "name": "Permissions: Delete Default Permissions",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "if (responseCode.code===204) {",
                  "    tests[\"Deleted: Default permissions\"] = true;",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "28964b47-bcae-4358-9a64-8c2f0de008fa"
              }
            }
          ],
          "_postman_id": "910a534c-6e5e-467e-ba8e-d3f4418cbd7d",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "\n",
              "options": {
                "raw": {}
              }
            },
            "url": "{{server}}/api/{{api}}/sites/{{siteId}}/projects/{{projectId}}/default-permissions/workbooks/groups/{{groupId}}/ShareView/Allow",
            "description": "Removes default permissions from a project. After the default permission has been removed, workbooks or data sources that are added to the project do not get the specified permission by default. You make separate requests to remove default permissions for workbooks and for data sources, and you make separate requests to remove default permissions for a specific group or user.\n\nURI\n1. DELETE /api/api-version/sites/site-id/projects/project-id/default-permissions/workbooks/groups/group-id/capability-name/capability-mode\n1. DELETE /api/api-version/sites/site-id/projects/project-id/default-permissions/workbooks/users/user-id/capability-name/capability-mode\n1. DELETE /api/api-version/sites/site-id/projects/project-id/default-permissions/datasources/groups/group-id/capability-name/capability-mode\n1. DELETE /api/api-version/sites/site-id/projects/project-id/default-permissions/datasources/users/user-id/capability-name/capability-mode\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the project.\n* project-id  The ID of the project to set default permissions for.\n* group-id  The ID of the group to remove the default permission for.\nuser-id  The ID of the user to remove default permission for.\n* capability-name The capability to remove the permissions for.\nValid capabilities for a workbook are AddComment, ChangeHierarchy, ChangePermissions, Delete, ExportData, ExportImage, ExportXml, Filter, Read (view), ShareView, ViewComments, ViewUnderlyingData, WebAuthoring, and Write.\nValid capabilities for a data source are ChangePermissions, Connect, Delete, ExportXml, Read (view), and Write.\nFor more information, see Permissions.\n* capability-mode  Allow to remove the allow permission, or Deny to remove the deny permission. This value is case sensitive.\n"
          },
          "response": []
        },
        {
          "name": "Permissions: Add Default Permissions copy",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "if (responseCode.code===200) {",
                  "    tests[\"Added: Default permissions\"] = true;",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "225f79d0-728e-426a-90e6-f78aab726267"
              }
            }
          ],
          "_postman_id": "d3e2847e-ad08-45f7-b9eb-2c80723d94e0",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              },
              {
                "key": "Content-Type",
                "value": "text/xml"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest>\n  <permissions>\n    <granteeCapabilities>\n      <user id=\"{{userId}}\" />\n      <capabilities>\n        <capability name=\"AddComment\" mode=\"Allow\" />\n        <capability name=\"WebAuthoring\" mode=\"Allow\" />       \n      </capabilities>\n    </granteeCapabilities>\n    <granteeCapabilities>\n      <group id=\"{{groupId}}\" />\n      <capabilities>\n        <capability name=\"ExportImage\" mode=\"Allow\" />\n      </capabilities>\n    </granteeCapabilities>\n  </permissions>\n</tsRequest>\n",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/projects/{{projectId}}/default-permissions/workbooks",
            "description": "Adds permissions to the specified project that will be applied by default to new workbooks and data sources as they are added to the project. You make separate requests to set default permissions for workbooks and for data sources.\n\nContent owners can override default permissions for their content, but only if project permissions have not been locked. Project permissions can be locked for a new project when you call Create Project or for an existing project by calling Update Project. For more information, see Lock Content Permissions to the Project.\n\nURI\n1. PUT /api/api-version/sites/site-id/projects/project-id/default-permissions/workbooks\n1. PUT /api/api-version/sites/site-id/projects/project-id/default-permissions/datasources\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the project.\n* project-id  The ID of the project to set default permissions for.\n\nAttributes\n* project-id  The <project> element is not required, but can be included. If the <project> element is included, the project-id value must match the project ID in the URI. Any other attributes in the <project> element are ignored.\nuser-id  The ID (not name) of the user to add default permissions for.\n* group-id  The ID (not name) of the group to add permissions for.\n* capability-name  The capability to assign. Valid capabilities for a workbook are\n* AddComment, ChangeHierarchy, ChangePermissions, Delete, ExportData, ExportImage, ExportXml, Filter, Read (view), ShareView, ViewComments, ViewUnderlyingData, WebAuthoring, and Write.\n* Valid capabilities for a data source are ChangePermissions, Connect, Delete, ExportXml, Read (view), and Write.\nFor more information, see Permissions.\n* capability-mode  Allow to allow the capability, or Deny to deny it. This value is case sensitive."
          },
          "response": []
        }
      ],
      "_postman_id": "88048f12-b76e-4ab5-8168-344f5fe38917"
    },
    {
      "name": "Project Permissions",
      "item": [
        {
          "name": "Project Management: Query Project Permissions",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "if (responseCode.code===200) {",
                  "    tests[\"Project permissions retrieved\"] = true;",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "7bfd9f31-77bc-47ce-bcc7-fa66f238b87b"
              }
            }
          ],
          "_postman_id": "722cd68c-5ec8-4b66-a2a0-0d0f5c454745",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/projects/{{projectId}}/permissions",
            "description": "Returns information about the set of permissions allowed or denied for groups and users in a project.\n\nURI\n1. GET /api/api-version/sites/site-id/projects/project-id/permissions\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the project.\n* project-id  The project to get permissions for."
          },
          "response": []
        },
        {
          "name": "Project Management: Add Project Permissions",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "if (responseCode.code===200) {",
                  "    tests[\"Added: Project permissions\"] = true;",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "fd988c89-17fe-47b0-90ad-180eebc61db4"
              }
            }
          ],
          "_postman_id": "b043b010-bdbb-4157-b762-ed267ac9e4e1",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest>\n  <permissions> \n    <project id=\"{{projectId}}\" />\n    <granteeCapabilities>\n      <user id=\"{{userId}}\" />\n      <capabilities>\n        <capability name=\"write\" mode=\"allow\" />\n      </capabilities>\n    </granteeCapabilities>\n  </permissions>\n</tsRequest>  ",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/projects/{{projectId}}/permissions",
            "description": "Adds permissions to the specified project for a Tableau Server user or group. You can specify multiple sets of permissions using one call.\n\nIf the request body includes a child datasource or <project> element, the request is invalid.\n\nURI\n1. PUT /api/api-version/sites/site-id/projects/project-id/permissions\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the project.\n* project-id  The ID of the project to set permissions for.\n\n\nAttributes\n* user-id  The ID (not name) of the user to add permissions for.\n* group-id  The ID (not name) of the group to add permissions for.\n* capability-name  The capability to assign permissions to. In Tableau Server 10.0, the valid capabilities for a project are ProjectLeader, Read (view), and Write.\nFor more information, see Permissions.\n* capability-mode  Allow to allow the capability, or Deny to deny it. This value is case sensitive."
          },
          "response": []
        },
        {
          "name": "Project Management: Delete Project Permission",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "if (responseCode.code===204) {",
                  "    tests[\"Deleted: Project permissions\"] = true;",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "dc740017-1d02-42b3-8f2d-af991d39faf9"
              }
            }
          ],
          "_postman_id": "b726816f-186c-4c7b-b8a6-a6fe62f6f436",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/projects/{{projectId}}/permissions/users/{{userId}}/write/allow"
          },
          "response": []
        }
      ],
      "_postman_id": "fe864050-15fd-4d59-a0d3-f79f97e0c770"
    },
    {
      "name": "Projects",
      "item": [
        {
          "name": "Projects: Create Project",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "if (responseCode.code === 201) ",
                  "{",
                  "    postman.setEnvironmentVariable(\"projectId\", json.tsResponse.project.$.id);",
                  "    postman.setEnvironmentVariable(\"projectName\", json.tsResponse.project.$.name);",
                  "",
                  "    tests[\"Created: Project with Name: \" + postman.getEnvironmentVariable(\"projectName\") + \" and Id: \" + postman.getEnvironmentVariable(\"projectId\")] = true;",
                  "",
                  "    tests[\"projectId env variable set = \" + postman.getEnvironmentVariable(\"projectId\")] = true;",
                  "    tests[\"projectName env variable set = \" + postman.getEnvironmentVariable(\"projectName\")] = true;",
                  "    ",
                  "",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "e8e34833-ef49-42c2-bbec-4fdd377eddf9"
              }
            }
          ],
          "_postman_id": "04752d49-81df-4254-9603-3412a4e1ec06",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest> \n  <project name=\"myNewProj\"  \n    description=\"A new project created with the REST API\" /> \n</tsRequest>\n",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/projects",
            "description": "Create a new project in a specific site\n\n* project-name  The name to assign to the project.\n* project-description  (Optional) A description for the project.\n* content-permissions  (Optional) Specify LockedToProject to lock permissions so that users cannot overwrite the default permissions set for the project, or specify ManagedByOwner to allow users to manage permissions for content that they own. For more information, see Lock Content Permissions to the Project. The default is ManagedByOwner."
          },
          "response": []
        },
        {
          "name": "Projects: Update Project",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "",
                  "",
                  "if (responseCode.code === 200) ",
                  "{   ",
                  "",
                  "    tests[\"Updated: Project with Name: \" + postman.getEnvironmentVariable(\"projectName\") + \" and Id: \" + postman.getEnvironmentVariable(\"projectId\")] = true;",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "9a3db10d-d552-45f9-afe7-5eb652a9c46c"
              }
            }
          ],
          "_postman_id": "87f7c3a6-0c1d-4b58-9482-6b9efa0b5b54",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest> \n  <project description=\"A new project created with the REST API which has been UPDATED\" /> \n</tsRequest>\n",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/projects/{{projectId}}",
            "description": "Update an existing project in a specific site\n\n1. PUT /api/api-version/sites/site-id/projects/project-id\n\n* new-name  (Optional) The new name for the project.\n* new-description  (Optional) The new description for the project.\n* new-content-permissions  (Optional) The new permissions setting for the project. Specify LockedToProject to lock permissions so that users cannot overwrite the default permissions set for the project, or specify ManagedByOwner to allow users to manage permissions for content that they own. For more information, see Lock Content Permissions to the Project. The default is ManagedByOwner."
          },
          "response": []
        },
        {
          "name": "Projects: Delete Project",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "if (responseCode.code == 204) {",
                  "    tests[\"Deleted: Project with name: \" + postman.getEnvironmentVariable(\"projectName\") + \" and Id: \" + postman.getEnvironmentVariable(\"projectId\") ] = true;",
                  "    postman.setEnvironmentVariable(\"projectId\", \"notSet\");",
                  "    postman.setEnvironmentVariable(\"projectName\", \"notSet\");    ",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "a402ab30-1bd1-4424-91ff-1ce75efc157e"
              }
            }
          ],
          "_postman_id": "df1f2ccc-857a-4c35-96c0-4c81ec6a667b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/projects/{{projectId}}",
            "description": "Delete a project"
          },
          "response": []
        },
        {
          "name": "Projects: Query Projects",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "//Initialize the environment variables if they don't exist",
                  "if (postman.getEnvironmentVariable(\"projectId\")==undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"projectId\", \"notSet\");",
                  "}",
                  "if (postman.getEnvironmentVariable(\"projectName\")==undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"projectName\", \"notSet\");",
                  "}",
                  "",
                  "var error = !(responseCode.code===200)",
                  "if (error){",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "else",
                  "{",
                  "    //These lines have been commented out because they would likely select the Default project and we don't want to accidentally delete that",
                  "    //postman.setEnvironmentVariable(\"projectId\", json.tsResponse.projects.project[0].$.id);",
                  "    //postman.setEnvironmentVariable(\"projectName\", json.tsResponse.projects.project[0].$.name);",
                  "",
                  "    tests[\"Projects retrieved.  Please set the following values MANUALLY to use in subsequent API calls\"] = true",
                  "    tests[\"projectId env variable set = \" + postman.getEnvironmentVariable(\"projectId\")] = !(postman.getEnvironmentVariable(\"projectId\")===\"notSet\");",
                  "    tests[\"projectName env variable set = \" + postman.getEnvironmentVariable(\"projectName\")] = !(postman.getEnvironmentVariable(\"projectId\")!==\"notSet\");",
                  "    ",
                  "}",
                  ""
                ],
                "id": "6afc303c-91c4-4b31-a37a-5fbd9baa4172"
              }
            }
          ],
          "_postman_id": "b441bb14-4862-400d-a3eb-5a3193f3e024",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": {
              "raw": "http://{{server}}/api/{{api}}/sites/{{siteId}}/projects?pageSize=30&pageNumber=1",
              "protocol": "http",
              "host": [
                "{{server}}"
              ],
              "path": [
                "api",
                "{{api}}",
                "sites",
                "{{siteId}}",
                "projects"
              ],
              "query": [
                {
                  "key": "pageSize",
                  "value": "30"
                },
                {
                  "key": "pageNumber",
                  "value": "1"
                }
              ]
            },
            "description": "Returns a list of projects on the specified site, with optional parameters for specifying the paging of large results.\n\n1. GET /api/api-version/sites/site-id/projects\n1. GET /api/api-version/sites/site-id/projects?pageSize=page-size&pageNumber=page-number\n\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the projects.\n* page-size  (Optional) The number of items to return in one response. The minimum is 1. The maximum is 1000. The default is 100. For more information, see Paginating Results.\n* page-number  (Optional) The offset for paging. The default is 1. For more information, see Paginating Results."
          },
          "response": []
        }
      ],
      "_postman_id": "8c8ac309-816c-4061-90d3-9fe8f6f2975b"
    },
    {
      "name": "Publishing",
      "item": [
        {
          "name": "Publishing: Initiate File Upload",
          "_postman_id": "d48129cd-c533-4d56-a883-f78fb8e1d51a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/fileUploads",
            "description": "**Note:** When you make this request with Postman the content-type will be multipart/form-data and you will get an error. The only way to get it to work is to copy the request in an application like Charles or Fiddler, edit the content-type to be multipart/mixed and then it will work.\n\nInitiates the upload process for a file. After the upload has been initiated, you call Append to File Upload to send individual blocks of the file to the server. When the complete file has been sent to the server, you call Publish Datasource or Publish Workbook to commit the upload.\n\nInitiate File Upload returns an upload session ID that you pass to Append to File Upload or one of the publishing methods in order to identify the upload session.\n\nThe file size that is returned in the response is initialized to zero (0) megabytes, because no data has yet been loaded. Subsequent calls to Append to File Upload or the publishing APIs update this value.\n\nURI\n1. POST /api/api-version/sites/site-id/fileUploads\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site to upload the file to."
          },
          "response": []
        },
        {
          "name": "Publishing: Append to File Upload",
          "_postman_id": "0644657b-35e5-4b7a-9add-5b5de9c23061",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "request_payload",
                  "value": "",
                  "type": "text"
                },
                {
                  "key": "tableau_file",
                  "value": "",
                  "type": "file"
                }
              ],
              "options": {
                "formdata": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/fileUploads/22253:304D185973FF4C3F989854411508C4D0-0:0",
            "description": "**Note:** When you make this request with Postman the content-type will be multipart/form-data and you will get an error. The only way to get it to work is to copy the request in an application like Charles or Fiddler, edit the content-type to be multipart/mixed and then it will work.\n\nUploads a block of data and appends it to the data that is already uploaded. This method is called after an upload has been initiated using Initiate File Upload.\n\nYou call Append to File Upload as many times as needed in order to upload the complete contents of a file. When the final block of data has been uploaded, you call Publish Datasource or Publish Workbook to commit the file.\n\nURI\n1. PUT /api/api-version/sites/site-id/fileUploads/upload-session-id\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site to upload the file to.\n* upload-session-id  The ID of the upload session. You get this value when you start an upload session using Initiate File Upload."
          },
          "response": []
        },
        {
          "name": "Publishing: Publish DataSource",
          "_postman_id": "4711210d-cbe5-4d05-a7b5-6b8d74a5eecf",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "request_payload",
                  "value": "<tsRequest><datasource name=\"chunkedDS\" ><connectionCredentials name=\"postgres\" password=\"admin\" embed=\"true\" ></connectionCredentials><project id=\"{{projectId}}\" ></project></datasource></tsRequest>",
                  "type": "text"
                }
              ],
              "options": {
                "formdata": {}
              }
            },
            "url": {
              "raw": "http://{{server}}/api/{{api}}/sites/{{siteId}}/datasources?uploadSessionId=22253:3114A19C524B421B9E560F2D4BFCD822-0:0&datasourceType=tds",
              "protocol": "http",
              "host": [
                "{{server}}"
              ],
              "path": [
                "api",
                "{{api}}",
                "sites",
                "{{siteId}}",
                "datasources"
              ],
              "query": [
                {
                  "key": "uploadSessionId",
                  "value": "22253:3114A19C524B421B9E560F2D4BFCD822-0:0"
                },
                {
                  "key": "datasourceType",
                  "value": "tds"
                }
              ]
            },
            "description": "Note: When you make this request with Postman the content-type will be multipart/form-data and you will get an error. The only way to get it to work is to copy the request in an application like Charles or Fiddler, edit the content-type to be multipart/mixed and then it will work.\n\nPublishes a data source on the specified site, or appends data to an existing data source. To make other changes to a published data source, call Update Datasource or Update Datasource Connection.\n\nThis method is used in two ways. You can call it to publish a data source in a single request. To do that, you include the content of the data source file in the body of the request. The maximum size of a file that can be published in a single request is 64MB.\n\nAlternatively, you can can publish a data source in multiple parts. To do that, you initiate a file upload by calling Initiate File Upload, send portions of the file to the server using Append to File Upload, and then commit the upload by calling Publish Datasource. \n\nURI\n1. POST /api/api-version/sites/site-id/datasources\n1. POST /api/api-version/sites/site-id/datasources?overwrite=overwrite-flag\n1. POST /api/api-version/sites/site-id/datasources?append=append-flag\n1. POST /api/api-version/sites/site-id/datasources?uploadSessionId=upload-session-id&datasourceType=datasource-file-type&overwrite=overwrite-flag&append=append-flag\n\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site to publish to.\n* overwrite-flag  (Optional) true to overwrite a data source that has the same name, or false to fail if the specified data source already exists. The default is false. If overwrite-flag is set to true but the data source doesn't already exist, the operation succeeds.\nYou can include both the overwrite and append parameters in a request, but they cannot both be true.\n* append-flag  (Optional) true to append the data being published to an existing data source that has the same name. The default is false. If append-flag is set to true but the data source doesn't already exist, the operation fails.\nIn order to append data to an existing data source, both the data source on the server and the data source you are publishing must be extracts (.tde files). The schemas of the two extracts must match.\nYou can include both the overwrite and append parameters in a request, but they cannot both be true.\n* upload-session-id  If you are calling this method to commit a file that was uploaded in parts, this value contains the upload session ID that was generated by a call to Initiate File Upload. If this value is not included, the server assumes that the body of the request contains the file to be published.\n* datasource-file-type  tds, tdsx, or tde the kind of file that you are uploading. This value is required if you are calling Publish Datasource in order to commit a file that was previously uploaded using Append to File Upload. The value is not used if you upload a file in the body of the request."
          },
          "response": []
        },
        {
          "name": "Publishing: Publish Workbook",
          "_postman_id": "8e01e706-48c0-4f0a-a8fd-a46ee51379ac",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              },
              {
                "key": "content-Type",
                "value": "multipart/mixed"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "request_payload",
                  "value": "<tsRequest><workbook name=\"restWorkbook\" ><project id=\"{{projectId}}\" ></project></workbook></tsRequest>",
                  "type": "text"
                },
                {
                  "key": "tableau_workbook",
                  "type": "file",
                  "src": "/Users/jmayo/Migration/Desktop/Embedded Content/Use Cases/Q3 SPIFF - Customer Deployment Leaderboard.twb"
                }
              ],
              "options": {
                "formdata": {}
              }
            },
            "url": {
              "raw": "http://{{server}}/api/{{api}}/sites/{{siteId}}/workbooks?overwrite=true",
              "protocol": "http",
              "host": [
                "{{server}}"
              ],
              "path": [
                "api",
                "{{api}}",
                "sites",
                "{{siteId}}",
                "workbooks"
              ],
              "query": [
                {
                  "key": "overwrite",
                  "value": "true"
                }
              ]
            },
            "description": "Note: When you make this request with Postman the content-type will be multipart/form-data and you will get an error. The only way to get it to work is to copy the request in an application like Charles or Fiddler, edit the content-type to be multipart/mixed and then it will work.\n\n1. POST /api/api-version/sites/site-id/workbooks\n1. POST /api/api-version/sites/site-id/workbooks?overwrite=overwrite-flag\n1. POST /api/api-version/sites/site-id/workbooks?uploadSessionId=upload-session-id&workbookType=workbook-file-type&overwrite=bool\n \n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site to publish to.\noverwrite-flag  (Optional) true to overwrite a workbook that has the same name, or false to fail if the specified workbook already exists. The default is false. If overwrite-flag is set to true but the workbook doesn't already exist, the operation succeeds.\n* upload-session-id  If you are calling this method to commit a file that was uploaded in parts, this value contains the upload session ID that was generated by a call to Initiate File Upload. If this value is not included, the server assumes that the body of the request contains the file to be published.\n* workbook-file-type  twb or twbx to indicate whether you have uploaded a workbook file (twb) or a packaged workbook file (twbx). This value is required if you are calling Publish Workbook in order to commit a file that was previously uploaded using Append to File Upload. The value is not used if you upload a file in the body of the request. "
          },
          "response": []
        }
      ],
      "_postman_id": "2549e7fd-4111-478e-8602-40d3d3918f4c"
    },
    {
      "name": "Revisions",
      "item": [
        {
          "name": "Datasources: Get Datasource Revisions",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "//Initialize the environment variables if they don't exist",
                  "if (postman.getEnvironmentVariable(\"revisionId\")==undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"revisionId\", \"notSet\");",
                  "}",
                  "",
                  "",
                  "var error = !(responseCode.code===200)",
                  "if (error){",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "else",
                  "{",
                  "    //These lines have been commented out because they would likely select the Default revision and we don't want to accidentally delete that",
                  "    //postman.setEnvironmentVariable(\"revisionId\", json.tsResponse.revisions.revision[0].$.id);",
                  "    //postman.setEnvironmentVariable(\"revisionName\", json.tsResponse.revisions.revision[0].$.name);",
                  "",
                  "    tests[\"revisions retrieved.  Please set the following values MANUALLY to use in subsequent API calls\"] = true",
                  "    tests[\"revisionId env variable set = \" + postman.getEnvironmentVariable(\"revisionId\")] = !(postman.getEnvironmentVariable(\"revisionId\")===\"notSet\");",
                  "    ",
                  "}",
                  ""
                ],
                "id": "22cc39d8-ea61-4693-8369-b5001e1dc097"
              }
            }
          ],
          "_postman_id": "82e53e4c-53d3-4221-8cb7-b06cd294ef1f",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/datasources/{{datasourceId}}/revisions",
            "description": "Returns a list of revision information (history) for the specified data source.\n\nURI\n1. GET /api/api-version/sites/site-id/datasources/datasource-id/revisions\n1. GET /api/api-version/sites/site-id/datasources/datasource-id/revisions?pageSize=page-size&pageNumber=page-number\n\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the data source to get revisions for.\n* datasource-id  The ID of the data source to get revisions for.\n* page-size  (Optional) The number of items to return in one response. The minimum is 1. The maximum is 1000. The default is 100. For more information, see Paginating Results.\n* page-number  (Optional) The offset for paging. The default is 1. For more information, see Paginating Results."
          },
          "response": []
        },
        {
          "name": "Datasources: Download Datasource Revision",
          "_postman_id": "2ed1ab19-eaa8-4132-83a9-24e590618cbf",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/datasources/{{datasourceId}}//revisions/{{revisionId}}/content",
            "description": "Downloads a specific version of a data source in .tdsx format.  WARNING: Don't try to download a tdsx with Postman. It will crash. Try downloading a tds that doesn't have a local file attached with it.\n\nURI\n1. GET /api/api-version/sites/site-id/datasources/datasource-id/revisions/revision-number/content\n\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the data source.\n* datasource-id  The ID of the data source to download.\n* revision-number  The revision number of the data source to download. To determine what versions are available, call Get Datasource Revisions."
          },
          "response": []
        },
        {
          "name": "Datasources: Delete Datasource Revision",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "if (responseCode.code == 204) {",
                  "    tests[\"Deleted: datasource revision \" + postman.getEnvironmentVariable(\"revisionId\") + \"with name: \" + postman.getEnvironmentVariable(\"datasourceName\") + \" and Id: \" + postman.getEnvironmentVariable(\"datasourceId\") ] = true;",
                  "    postman.setEnvironmentVariable(\"revisionId\", \"notSet\");",
                  "    tests[\"revisionId env variable set = \" + postman.getEnvironmentVariable(\"revisionId\")] = !(postman.getEnvironmentVariable(\"revisionId\")!==\"notSet\");",
                  "        ",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  ""
                ],
                "id": "e3fa86e0-fc00-4aa4-8041-e0845f01ebd2"
              }
            }
          ],
          "_postman_id": "a05393e0-8639-4cc2-99fb-c49e35d786a4",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/datasources/{{datasourceId}}//revisions/{{revisionId}}",
            "description": "Removes a specific version of a data source from the specified site.\nThe content is removed, and the specified revision can no longer be downloaded using Download Datasource Revision. If you call Get Datasource Revisions, the revision that's been removed is listed with the attribute IsDeleted=\"true\".\n\nURI\n1. DELETE /api/api-version/sites/site-id/datasources/datasource-id/revisions/revision-number\n\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the data source.\n* datasource-id  The ID of the data source to download.\n* revision-number  The revision number of the data source to download. To determine what versions are available, call Get Datasource Revisions."
          },
          "response": []
        },
        {
          "name": "Workbook Management: Get Workbook Revisions",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "//Initialize the environment variables if they don't exist",
                  "if (postman.getEnvironmentVariable(\"revisionId\")==undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"revisionId\", \"notSet\");",
                  "}",
                  "",
                  "",
                  "var error = !(responseCode.code===200)",
                  "if (error){",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "else",
                  "{",
                  "    //These lines have been commented out because they would likely select the Default revision and we don't want to accidentally delete that",
                  "    //postman.setEnvironmentVariable(\"revisionId\", json.tsResponse.revisions.revision[0].$.id);",
                  "    //postman.setEnvironmentVariable(\"revisionName\", json.tsResponse.revisions.revision[0].$.name);",
                  "",
                  "    tests[\"revisions retrieved.  Please set the following values MANUALLY to use in subsequent API calls\"] = true",
                  "    tests[\"revisionId env variable set = \" + postman.getEnvironmentVariable(\"revisionId\")] = !(postman.getEnvironmentVariable(\"revisionId\")===\"notSet\");",
                  "    ",
                  "}",
                  ""
                ],
                "id": "6169f861-5a86-4d37-aa86-8223cbe87de0"
              }
            }
          ],
          "_postman_id": "dc2b9b91-a958-4bcd-b4ae-082db7b9737d",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": {
              "raw": "http://{{server}}/api/{{api}}/sites/{{siteId}}/workbooks/{{workbookId}}/revisions?pageSize=100&pageNumber=1",
              "protocol": "http",
              "host": [
                "{{server}}"
              ],
              "path": [
                "api",
                "{{api}}",
                "sites",
                "{{siteId}}",
                "workbooks",
                "{{workbookId}}",
                "revisions"
              ],
              "query": [
                {
                  "key": "pageSize",
                  "value": "100"
                },
                {
                  "key": "pageNumber",
                  "value": "1"
                }
              ]
            },
            "description": "Returns a list of revision information (history) for the specified workbook.\n\nURI\n1. GET /api/api-version/sites/site-id/workbooks/workbook-id/revisions\n1. GET /api/api-version/sites/site-id/workbooks/workbook-id/revisions?pageSize=page-size&pageNumber=page-number\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the workbook to get revisions for.\n* workbook-id  The ID of the workbook to get revisions for.\n* page-size  (Optional) The number of items to return in one response. The minimum is 1. The maximum is 1000. The default is 100. For more information, see Paginating Results.\n* page-number  (Optional) The offset for paging. The default is 1. For more information, see Paginating Results."
          },
          "response": []
        },
        {
          "name": "Workbook Management: Download Workbook Revision",
          "_postman_id": "d332dba9-d81b-45f0-9d15-115a3e3500cd",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/workbooks/{{workbookId}}/revisions/{{revisionId}}/content",
            "description": "Downloads the specified Workbook. WARNING: Don't try to download a twbx with POSTman. It will crash. Try downloading a tds that doesn't have a local file attached with it.\n\nResponse\n* One of the following, depending on the format of the workbook:\nThe workbook's content in .twb format (Content-Type: application/xml)\nThe workbook's content in .twbx format (Content-Type: application/octet-stream)\n\nURI\n1. GET /api/api-version/sites/site-id/workbooks/workbook-id/revisions/revision-number/content\n \n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the workbook.\n* workbook-id  The ID of the workbook to download.\n* revision-number  The revision number of the workbook to download. To determine what versions are available, call Get Workbook Revisions."
          },
          "response": []
        },
        {
          "name": "Workbook Management: Remove Workbook Revision",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "if (responseCode.code == 204) {",
                  "    tests[\"Deleted: workbook revision \" + postman.getEnvironmentVariable(\"revisionId\") + \"of workbook: \" + postman.getEnvironmentVariable(\"workbookName\") + \" and Id: \" + postman.getEnvironmentVariable(\"workbookId\") ] = true;",
                  "    postman.setEnvironmentVariable(\"revisionId\", \"notSet\");",
                  "    tests[\"revisionId env variable set = \" + postman.getEnvironmentVariable(\"revisionId\")] = (postman.getEnvironmentVariable(\"revisionId\")!==\"notSet\");",
                  "        ",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  ""
                ],
                "id": "a34c3480-cae9-4427-9572-5338a83f265b"
              }
            }
          ],
          "_postman_id": "c0a774ae-2f3f-4767-8184-c1c7e41d7384",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/workbooks/{{workbookId}}/revisions/{{revisionId}}",
            "description": "Removes a specific version of a workbook from the specified site.\n\nThe content is removed, and the specified revision can no longer be downloaded using Download Workbook Revision. If you call Get Workbook Revisions, the revision that's been removed is listed with the attribute IsDeleted=\"true\".\n\n**Note:** Calling this method permanently removes the specified workbook revision.\n\nURI\n1. DELETE /api/api-version/sites/site-id/workbooks/workbook-id/revisions/revision-number\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the workbook to get revisions for.\n* workbook-id  The ID of the workbook to get revisions for.\n* page-size  (Optional) The number of items to return in one response. The minimum is 1. The maximum is 1000. The default is 100. For more information, see Paginating Results.\n* revision-number  The revision number of the workbook to remove. To determine what versions are available, call Get Workbook Revisions.\n"
          },
          "response": []
        }
      ],
      "_postman_id": "5b6d8359-522c-4535-b7ec-cd08a1868b9a"
    },
    {
      "name": "Schedules",
      "item": [
        {
          "name": "Schedules: Create Schedule",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "if (responseCode.code === 200) ",
                  "{",
                  "    postman.setEnvironmentVariable(\"scheduleId\", json.tsResponse.schedule.$.id);",
                  "    postman.setEnvironmentVariable(\"scheduleName\", json.tsResponse.schedule.$.name);",
                  "",
                  "    tests[\"Created: schedule with Name: \" + postman.getEnvironmentVariable(\"scheduleName\") + \" and Id: \" + postman.getEnvironmentVariable(\"scheduleId\")] = true;",
                  "",
                  "    tests[\"scheduleId env variable set = \" + postman.getEnvironmentVariable(\"scheduleId\")] = true;",
                  "    tests[\"scheduleName env variable set = \" + postman.getEnvironmentVariable(\"scheduleName\")] = true;",
                  "    ",
                  "",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "f09fd8a7-bc7a-4a3f-985f-e69f658d4dd6"
              }
            }
          ],
          "_postman_id": "81a49f83-858d-43fd-8624-e99988897886",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              },
              {
                "key": "Content-Type",
                "value": "text/xml"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest>\n  <schedule name=\"REST API TEST SCHEDULE\"\n    priority=\"50\" \n    type=\"Extract\"\n    frequency=\"Weekly\" \n    executionOrder=\"Parallel\">\n    <frequencyDetails start=\"06:00:00\" end=\"16:59:00\">\n     <intervals>\n        <interval weekDay=\"Monday\" />\n      </intervals>\n    </frequencyDetails>\n  </schedule>\n</tsRequest>",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/projects",
            "description": "Creates a new schedule on Tableau Server.\n\nSchedules are not specific to sites. For more information, see Scheduled Refresh Tasks and Subscriptions and Create or Modify a Schedule in the Tableau Server documentation.\n\n**Note:** After you create a resource, the server updates its search index. If you make a query immediately to see a new resource, the query results might not be up to date.\n\nURI\n1. POST /api/api-version/schedules\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n\nAttributes\n* schedule-name  The name to give to the schedule. This name identifies the schedule in the server environment when users select a schedule and manage schedule information.\n* schedule-priority  An integer value between 1 and 100 that determines the default priority of the schedule if multiple tasks are pending in the queue. Higher numbers have higher priority.\n* schedule-type  Extract to create an extract refresh schedule, or Subscription to create a subscription schedule.\n* schedule-execution-order  Parallel to allow jobs associated with this schedule to run at the same time, or Serial to require the jobs to run one after the other.\n* schedule-frequency  The granularity of the schedule. Valid values are:\n  - Hourly. Jobs can be scheduled to run one or more times per day at intervals specified in minutes or hours.\n  - Daily. Jobs can be scheduled to run once per day at a specific time.\n  - Weekly. Jobs can be scheduled to run one or more times per week.\n  - Monthly. Jobs can be scheduled to run once per month on a specific day.\nThe value you provide for schedule-frequency determines whether you must include an end-time value, and what is required in the contents of the <intervals> element.\n* start-time  The time of day on which scheduled jobs should run (or if the frequency is hourly, on which they should start being run), in the format HH:MM:SS (for example, 18:30:00). This value is required for all schedule frequencies.\n* end-time  If the schedule frequency is Hourly, the time of day on which scheduled jobs should stop being run, in the format HH:MM:SS (for example, 23:30:00). Hourly jobs will occur at the specified intervals between the start time and the end time. For other schedule frequencies, this value is not required; if the attribute is included, it is ignored.\n* interval-expression  A value that specifies the interval between jobs associated with the schedule. The value you specify here depends on the the value specified in schedule-frequency.\n  - Hourly\nThe interval expression is only one of the following:\n    - hours=\"interval\" where interval is 1, 2, 4, 6, 8, or 12, representing how many hours between jobs.\n    - minutes=\"interval\" where interval is 15 or 30, representing how many minutes between jobs.\nYou can specify an interval in hours or minutes, but not both.\n  - Daily\nIf the schedule frequency is Daily, no interval is specified. Any information specified in the <intervals> element is ignored.\n  - Weekly\nThe interval expression is weekDay=\"weekday\", where weekday is Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, or Saturday.\nYou can specify multiple <interval> elements to indicate that scheduled jobs should run on multiple days during the week.\n  - Monthly\nThe interval expression is monthDay=\"day\", where day is either the day of the month (1, 2, etc.) or LastDay.\n"
          },
          "response": []
        },
        {
          "name": "Schedules: Query Extract Refresh Tasks",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "//Initialize the environment variables if they don't exist",
                  "if (postman.getEnvironmentVariable(\"jobId\")==undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"jobId\", \"notSet\");",
                  "}",
                  "if (postman.getEnvironmentVariable(\"jobName\")==undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"jobName\", \"notSet\");",
                  "}",
                  "",
                  "var error = !(responseCode.code===200)",
                  "if (error){",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "else",
                  "{",
                  "    //These lines have been commented out because they would likely select the Default job and we don't want to accidentally delete that",
                  "    //postman.setEnvironmentVariable(\"jobId\", json.tsResponse.jobs.job[0].$.id);",
                  "    //postman.setEnvironmentVariable(\"jobName\", json.tsResponse.jobs.job[0].$.name);",
                  "",
                  "    tests[\"Extract refresh tasks retrieved.  Please set the following values MANUALLY to use in subsequent API calls\"] = true",
                  "    tests[\"jobId env variable set = \" + postman.getEnvironmentVariable(\"jobId\")] = (postman.getEnvironmentVariable(\"jobId\")===\"notSet\");",
                  "    tests[\"jobName env variable set = \" + postman.getEnvironmentVariable(\"jobName\")] = (postman.getEnvironmentVariable(\"jobId\")!==\"notSet\");",
                  "    ",
                  "}",
                  ""
                ],
                "id": "75e75b81-44d3-4ee4-95c9-efbf46ad19ec"
              }
            }
          ],
          "_postman_id": "bd65f2db-0ca9-48db-b149-14faf82114df",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/schedules/{{scheduleId}}/extracts",
            "description": "Returns a list of the extract refresh tasks for a specified schedule on the specified site.\n\nTo get the ID of a schedule, call the Query Schedules method. Note that the Query Schedules method is global to the server; schedules are not specific to a site. Therefore, the URI for the Query Schedules method does not include /sites/ or a site ID. However, individual scheduled tasks are specific to a site, and the URI for Query Extract Refresh Tasks must include the site inforamtion.\n\nFor more information about refresh tasks, see Manage Refresh Tasks.\n\n\n1. GET /api/api-version/sites/site-id/schedules/schedule-id/extracts\n1. GET /api/api-version/sites/site-id/schedules/schedule-id/extracts?pageSize=page-size&pageNumber=page-number\n\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the projects.\n* schedule-id  The ID of the schedule to get extract information for.\n* page-size  (Optional) The number of items to return in one response. The minimum is 1. The maximum is 1000. The default is 100. For more information, see Paginating Results.\n* page-number  (Optional) The offset for paging. The default is 1. For more information, see Paginating Results."
          },
          "response": []
        },
        {
          "name": "Schedules: Query Schedules",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "//Initialize the environment variables if they don't exist",
                  "if (postman.getEnvironmentVariable(\"scheduleId\")==undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"scheduleId\", \"notSet\");",
                  "}",
                  "if (postman.getEnvironmentVariable(\"scheduleName\")==undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"scheduleName\", \"notSet\");",
                  "}",
                  "",
                  "var error = !(responseCode.code===200)",
                  "if (error){",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "else",
                  "{",
                  "    //These lines have been commented out because they would likely select the Default schedule and we don't want to accidentally delete that",
                  "    //postman.setEnvironmentVariable(\"scheduleId\", json.tsResponse.schedules.schedule[0].$.id);",
                  "    //postman.setEnvironmentVariable(\"scheduleName\", json.tsResponse.schedules.schedule[0].$.name);",
                  "    ",
                  "    postman.setEnvironmentVariable(\"scheduleId\", \"notSet\");",
                  "    postman.setEnvironmentVariable(\"scheduleName\", \"notSet\");",
                  "",
                  "    tests[\"Schedules retrieved.  Please set the following values MANUALLY to use in subsequent API calls\"] = true",
                  "    tests[\"scheduleId env variable set = \" + postman.getEnvironmentVariable(\"scheduleId\")] = (postman.getEnvironmentVariable(\"scheduleId\")!==\"notSet\");",
                  "    tests[\"scheduleName env variable set = \" + postman.getEnvironmentVariable(\"scheduleName\")] = (postman.getEnvironmentVariable(\"scheduleId\")!==\"notSet\");",
                  "    ",
                  "}",
                  ""
                ],
                "id": "8cdfbd26-207a-4a5e-837e-8daa245bd1ca"
              }
            }
          ],
          "_postman_id": "33c233dc-652a-4317-97e7-d91840726ebe",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/schedules",
            "description": "Returns a list of extract and subscription schedules. For each schedule, the API returns the name, frequency, priority, and other information.\n\nFor more information about schedules, see Create or Modify a Schedule.\n\n\n1. GET /api/api-version/schedules\n1. GET /api/api-version/schedules?pageSize=page-size&pageNumber=page-number\n\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* page-size  (Optional) The number of items to return in one response. The minimum is 1. The maximum is 1000. The default is 100. For more information, see Paginating Results.\n* page-number  (Optional) The offset for paging. The default is 1. For more information, see Paginating Results."
          },
          "response": []
        },
        {
          "name": "Schedules: Update Schedule",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "//Initialize the environment variables if they don't exist",
                  "if (postman.getEnvironmentVariable(\"scheduleId\")==undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"scheduleId\", \"notSet\");",
                  "}",
                  "if (postman.getEnvironmentVariable(\"scheduleName\")==undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"scheduleName\", \"notSet\");",
                  "}",
                  "",
                  "var error = !(responseCode.code===200)",
                  "if (error){",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "else",
                  "{",
                  "    ",
                  "    tests[\"Updated: Schedule\"] = true;",
                  "   ",
                  "    ",
                  "}",
                  ""
                ],
                "id": "e6529816-49c4-4537-b17f-5ef8042e0359"
              }
            }
          ],
          "_postman_id": "5933097d-28e9-4575-b52c-b64542b0cd25",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              },
              {
                "key": "Content-Type",
                "value": "text/xml"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest>\n  <schedule \n    name=\"Modified by the REST API\"\n    priority=\"49\" \n    frequency=\"Hourly\" \n    executionOrder=\"Parallel\">\n    <frequencyDetails start=\"10:00:00\" end=\"22:00:00\">\n     <intervals>\n        <interval hours=\"2\" />\n      </intervals>\n    </frequencyDetails>\n  </schedule>\n</tsRequest>",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/schedules/{{scheduleId}}",
            "description": "Modifies settings for the specified schedule, including the name, priority, and frequency details.\n\n\n1. PUT /api/api-version/schedules/schedule-id\n\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* schedule-id  The ID of the schedule to update. To determine what schedules are available, call Query Schedules.\n\nAttributes\n* schedule-name  The name to give to the schedule. This name identifies the schedule in the server environment when users select a schedule and manage schedule information.\n* schedule-priority  An integer value between 1 and 100 that determines the default priority of the schedule if multiple tasks are pending in the queue. Higher numbers have higher priority.\n* schedule-type  Extract to create an extract refresh schedule, or Subscription to create a subscription schedule.\n* schedule-execution-order  Parallel to allow jobs associated with this schedule to run at the same time, or Serial to require the jobs to run one after the other.\n* schedule-frequency  The granularity of the schedule. Valid values are:\n  - Hourly. Jobs can be scheduled to run one or more times per day at intervals specified in minutes or hours.\n  - Daily. Jobs can be scheduled to run once per day at a specific time.\n  - Weekly. Jobs can be scheduled to run one or more times per week.\n  - Monthly. Jobs can be scheduled to run once per month on a specific day.\nThe value you provide for schedule-frequency determines whether you must include an end-time value, and what is required in the contents of the <intervals> element.\n* start-time  The time of day on which scheduled jobs should run (or if the frequency is hourly, on which they should start being run), in the format HH:MM:SS (for example, 18:30:00). This value is required for all schedule frequencies.\n* end-time  If the schedule frequency is Hourly, the time of day on which scheduled jobs should stop being run, in the format HH:MM:SS (for example, 23:30:00). Hourly jobs will occur at the specified intervals between the start time and the end time. For other schedule frequencies, this value is not required; if the attribute is included, it is ignored.\n* interval-expression  A value that specifies the interval between jobs associated with the schedule. The value you specify here depends on the the value specified in schedule-frequency.\n  - Hourly\nThe interval expression is only one of the following:\n    - hours=\"interval\" where interval is 1, 2, 4, 6, 8, or 12, representing how many hours between jobs.\n    - minutes=\"interval\" where interval is 15 or 30, representing how many minutes between jobs.\nYou can specify an interval in hours or minutes, but not both.\n  - Daily\nIf the schedule frequency is Daily, no interval is specified. Any information specified in the <intervals> element is ignored.\n  - Weekly\nThe interval expression is weekDay=\"weekday\", where weekday is Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, or Saturday.\nYou can specify multiple <interval> elements to indicate that scheduled jobs should run on multiple days during the week.\n  - Monthly\nThe interval expression is monthDay=\"day\", where day is either the day of the month (1, 2, etc.) or LastDay.\n"
          },
          "response": []
        },
        {
          "name": "Schedules: Delete Schedule",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "if (responseCode.code === 204) ",
                  "{",
                  "",
                  "",
                  "    tests[\"Deleted: schedule with Name: \" + postman.getEnvironmentVariable(\"scheduleName\") + \" and Id: \" + postman.getEnvironmentVariable(\"scheduleId\")] = true;",
                  "    postman.setEnvironmentVariable(\"scheduleId\", \"notSet\");",
                  "    postman.setEnvironmentVariable(\"scheduleName\", \"notSet\");",
                  "    tests[\"Please set the following values MANUALLY to use in subsequent API calls\"] = true",
                  "    tests[\"scheduleId env variable set = \" + postman.getEnvironmentVariable(\"scheduleId\")] = (postman.getEnvironmentVariable(\"scheduleId\")!==\"notSet\");",
                  "    tests[\"scheduleName env variable set = \" + postman.getEnvironmentVariable(\"scheduleName\")] = (postman.getEnvironmentVariable(\"scheduleId\")!==\"notSet\");",
                  "    ",
                  "",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "44137ea7-ecbf-432f-a613-3e14613ea3f7"
              }
            }
          ],
          "_postman_id": "b3531d03-81b9-485f-b799-b3f05c78a0a1",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              },
              {
                "key": "Content-Type",
                "value": "text/xml"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest>\n  <schedule name=\"REST API TEST SCHEDULE\"\n    priority=\"50\" \n    type=\"Extract\"\n    frequency=\"Weekly\" \n    executionOrder=\"Parallel\">\n    <frequencyDetails start=\"06:00:00\">\n     <intervals>\n        <interval weekDay=\"Monday\" />\n      </intervals>\n    </frequencyDetails>\n  </schedule>\n</tsRequest>",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/schedules/{{scheduleId}}",
            "description": "Deletes the specified schedule.\n\nURI\n1. DELETE /api/api-version/schedules/schedule-id\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* schedule-id  The ID of the schedule to delete. To determine what schedules are available, call Query Schedules.\n"
          },
          "response": []
        }
      ],
      "_postman_id": "df1525ee-be94-4521-8d82-4b59341f52a3"
    },
    {
      "name": "Sites",
      "item": [
        {
          "name": "Sites: Create Site",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var json = xml2Json(responseBody);",
                  "",
                  "if ( responseCode.code===200)",
                  "{",
                  "    postman.setEnvironmentVariable(\"siteId\", json.tsResponse.site.$.id);",
                  "    postman.setEnvironmentVariable(\"siteName\", json.tsResponse.user.$.name);",
                  "    postman.setEnvironmentVariable(\"contentUrl\", json.tsResponse.user.$.contentUrl);",
                  "",
                  "    tests[\"Created: Site with name: \" + postman.getEnvironmentVariable(\"siteName\") + \" and id: \" + postman.getEnvironmentVariable(\"siteId\")]",
                  "    tests[\"siteId env variable set = \" + postman.getEnvironmentVariable(\"siteId\")] = true;",
                  "    tests[\"siteName env variable set = \" + postman.getEnvironmentVariable(\"siteName\")] = true;",
                  "    tests[\"contentUrl env variable set = \" + postman.getEnvironmentVariable(\"contentUrl\")] = true;",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  ""
                ],
                "id": "86b9f76c-1dcc-4856-aa69-b536da4efd36"
              }
            }
          ],
          "_postman_id": "a1421429-7736-4df4-8ce5-af21ee9489e1",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest>\n  <site name=\"NewSiteName\"\n    contentUrl=\"NewSite\"\n    adminMode=\"ContentAndUsers\"\n    userQuota=\"10\"\n    storageQuota=\"40\"\n  disableSubscriptions=\"false\"/>\n</tsRequest>",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites",
            "description": "Create a new site\n\n* site-name  The name of the site.\n* content-url  The site URL. This value can contain only characters that are valid in a URL.\n* admin-mode  (Optional) Specify ContentAndUsers to allow site administrators to use the server interface and tabcmd commands to add and remove users. (Specifying this option does not give site administrators permissions to manage users using the REST API.) Specify ContentOnly to prevent site administrators from adding or removing users. (Server administrators can always add or remove users.) **Note: You cannot set adminMode to ContentOnly and also set userQuota.**\n* num-users  (Optional) The maximum number of users for the site. If you do not specify this value, the limit depends on the type of licensing configured for the server. For user-based license, the maximum number of users is set by the license. For core-based licensing, there is no limit to the number of users. If you specify a maximum value, only licensed users are counted and server administrators are excluded.\n* storage-quota  (Optional) The maximum amount of space for the new site, in megabytes. If you set a quota and the site exceeds it, publishers will be prevented from uploading new content until the site is under the limit again.\n* disable-subscriptions  (Optional) Specify true to prevent users from being able to subscribe to workbooks on the specified site. The default is false."
          },
          "response": []
        },
        {
          "name": "Sites: Query Sites",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "var json = xml2Json(responseBody);",
                  "",
                  "//Initialize the environment variables if they don't exist",
                  "if (postman.getEnvironmentVariable(\"siteId\")==undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"siteId\", \"notSet\");",
                  "}",
                  "if (postman.getEnvironmentVariable(\"siteName\")==undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"siteName\", \"notSet\");",
                  "}",
                  "",
                  "var error = !(responseCode.code===200)",
                  "if (error){",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "else",
                  "{",
                  "    //These lines have been commented out because they would likely select the Default site and we don't want to accidentally delete that",
                  "    //postman.setEnvironmentVariable(\"siteId\", json.tsResponse.sites.site[0].$.id);",
                  "    //postman.setEnvironmentVariable(\"siteName\", json.tsResponse.sites.site[0].$.name);",
                  "",
                  "    tests[\"Sites retrieved.  Please set the following values MANUALLY to use in subsequent API calls\"] = true",
                  "    tests[\"siteId env variable set = \" + postman.getEnvironmentVariable(\"siteId\")] = (postman.getEnvironmentVariable(\"siteId\")!==\"notSet\");",
                  "    tests[\"siteName env variable set = \" + postman.getEnvironmentVariable(\"siteName\")] = (postman.getEnvironmentVariable(\"siteId\")!==\"notSet\");",
                  "    ",
                  "}",
                  ""
                ],
                "id": "5c8fdc9b-bbfa-475c-8f7c-990cf1962677"
              }
            }
          ],
          "_postman_id": "98ddafad-7e19-4e90-8611-9edebc47473d",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/sites/",
            "description": "Returns a list of all sites on the server.\n\nURI\n1. GET /api/api-version/sites\n1. GET /api/api-version/sites?pageSize=page-size&pageNumber=page-number\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* page-size  (Optional) The number of items to return in one response. The minimum is 1. The maximum is 1000. The default is 100. For more information, see Paginating Results.\n* page-number  (Optional) The offset for paging. The default is 1. For more information, see Paginating Results."
          },
          "response": []
        },
        {
          "name": "Sites: Query Site",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "//Initialize the environment variables if they don't exist",
                  "if (postman.getEnvironmentVariable(\"siteId\")==undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"siteId\", \"notSet\");",
                  "}",
                  "if (postman.getEnvironmentVariable(\"siteName\")==undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"siteName\", \"notSet\");",
                  "}",
                  "",
                  "var error = !(responseCode.code===200)",
                  "if (error){",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "else",
                  "{",
                  "    //These lines have been commented out because they would likely select the Default site and we don't want to accidentally delete that",
                  "    //postman.setEnvironmentVariable(\"siteId\", json.tsResponse.sites.site[0].$.id);",
                  "    //postman.setEnvironmentVariable(\"siteName\", json.tsResponse.sites.site[0].$.name);",
                  "",
                  "    tests[\"Site retrieved.  Please set the following values MANUALLY to use in subsequent API calls\"] = true",
                  "    tests[\"siteId env variable set = \" + postman.getEnvironmentVariable(\"siteId\")] = !(postman.getEnvironmentVariable(\"siteId\")===\"notSet\");",
                  "    tests[\"siteName env variable set = \" + postman.getEnvironmentVariable(\"siteName\")] = !(postman.getEnvironmentVariable(\"siteId\")!==\"notSet\");",
                  "    ",
                  "}",
                  ""
                ],
                "id": "562f4438-7672-4e1c-856c-6ec9769e3a90"
              }
            }
          ],
          "_postman_id": "402a4f07-ff52-42a5-9abc-f133e93d882e",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": {
              "raw": "http://{{server}}/api/{{api}}/sites/{{siteName}}?key=name",
              "protocol": "http",
              "host": [
                "{{server}}"
              ],
              "path": [
                "api",
                "{{api}}",
                "sites",
                "{{siteName}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "name"
                }
              ]
            },
            "description": "Returns information about the specified site, with the option to return information about the storage space and user count for the site.\n\n**Note:** After you create a resource, the server updates its search index. If you make a query immediately to see a new resource, the query results might not be up to date.\n\nYou can specify the site to delete by using the site ID, the site name, or the content URL. You use the key query string parameter to indicate how you are specifying the site, as shown in the URIs.\n\n**Note:** You can only get site information for the site that you have signed in to.\n\n\nURI\n1. GET /api/api-version/sites/site-id\n1. GET /api/api-version/sites/site-name?key=name\n1. GET /api/api-version/sites/content-url?key=contentUrl\n\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site to get information for.\n* site-name  The name of the site to get information for. If you specify a site name, you must also include the parameter key=name.\n* content-url  The URL of the site to get information for. If you specify a content URL, you must also include the parameter key=contentUrl."
          },
          "response": []
        },
        {
          "name": "Sites: Site Information Including Storage",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "//Initialize the environment variables if they don't exist",
                  "if (postman.getEnvironmentVariable(\"groupId\")==undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"groupId\", \"notSet\");",
                  "}",
                  "if (postman.getEnvironmentVariable(\"groupName\")==undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"groupName\", \"notSet\");",
                  "}",
                  "",
                  "var error = !(responseCode.code===200)",
                  "if (error){",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "else",
                  "{",
                  "",
                  "",
                  "    tests[\"Site information retrieved\"] = true",
                  "",
                  "    ",
                  "}",
                  ""
                ],
                "id": "a0020c02-4872-4b12-988b-af71ab312525"
              }
            }
          ],
          "_postman_id": "f6d4751e-108f-4256-886a-00c625508dcb",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": {
              "raw": "http://{{server}}/api/{{api}}/sites/{{siteName}}?keyname=",
              "protocol": "http",
              "host": [
                "{{server}}"
              ],
              "path": [
                "api",
                "{{api}}",
                "sites",
                "{{siteName}}"
              ],
              "query": [
                {
                  "key": "keyname",
                  "value": ""
                }
              ]
            },
            "description": "View information (including storage info) about a site - similar to Query Site but with more stuff."
          },
          "response": []
        },
        {
          "name": "Sites: Update Site",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "",
                  "",
                  "if (responseCode.code === 200) ",
                  "{   ",
                  "",
                  "    tests[\"Updated: Site with Name: \" + postman.getEnvironmentVariable(\"siteName\") + \" and Id: \" + postman.getEnvironmentVariable(\"siteId\")] = true;",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "fb859dee-daee-461b-aa4d-c8f8dc76c54e"
              }
            }
          ],
          "_postman_id": "8eaf125d-43f5-489e-8cb5-526df6755358",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest>\n  <site name=\"{{siteName}}\"\n    contentUrl=\"{{contentUrl\"\n    adminMode=\"ContentAndUsers\"\n    userQuota=\"11\"\n    state=\"active\"\n    statusReason=\"Update\"\n    storageQuota=\"40\"\n  disableSubscriptions=\"false\"/>\n</tsRequest>",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}",
            "description": "Update an existing Site\n\n* new-site-name  (Optional) The new name of the site.\n* new-content-url  (Optional) The new site URL. This value can contain only characters that are valid in a URL.\n* new-admin-mode  (Optional) Specify ContentAndUsers to allow site administrators to use the server interface and tabcmd commands to add and remove users. (Specifying this option does not give site administrators permissions to manage users using the REST API.) Specify ContentOnly to prevent site administrators from adding or removing users. (Server administrators can always add or remove users.)\n**Note: You cannot set adminMode to ContentOnly and also set userQuota.**\n* new-num-users  (Optional) The new maximum number of users for the site. Only licensed users are counted and server administrators are excluded.\nSetting this value to -1 removes any value that was set previously. In that case, the limit depends on the type of licensing configured for the server. For user-based licensing, the maximum number of users is set by the license. For core-based licensing, there is no limit to the number of users.\n* new-state  (Optional) Active to set the site to active mode, or Suspended to suspend the site.\n* new-storage-quota  (Optional) The new maximum amount of space for the new site, in megabytes. If you set a quota and the site exceeds it, publishers will be prevented from uploading new content until the site is under the limit again.\n* new-disable-subscriptions  (Optional) true to prevent users from being able to subscribe to workbooks on the specified site.\n* revision-history-enabled  (Optional) true if the site maintains revisions for changes to workbooks and data sources; otherwise, false. The default is false.\n* revision-limit  (Optional) An integer between 2 and 10000 to indicate a limited number of revisions for content.\n* Setting this value to -1 removes any value that was set previously, and effectively removes any limit to the number of revisions that are maintained."
          },
          "response": []
        },
        {
          "name": "Sites: Delete Site",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "if (responseCode.code === 204)",
                  "{",
                  "    tests[\"Site with Id:\" + postman.getEnvironmentVariable(\"siteId\") + \" and name:\" + postman.getEnvironmentVariable(\"siteName\") + \" deleted\"] == true",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}"
                ],
                "id": "00d2875c-5c0b-4258-9aad-f54bdc26fde6"
              }
            }
          ],
          "_postman_id": "e2b4140c-455b-438b-aa6f-50462010b4be",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest>\n  <site name=\"russell\"\n    contentUrl=\"russellSite\"\n    adminMode=\"ContentAndUsers\"\n    userQuota=\"10\"\n    storageQuota=\"40\"\n  disableSubscriptions=\"false\"/>\n</tsRequest>",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}",
            "description": "Deletes the specified site.\nYou can specify the site to delete by using the site ID, the site name, or the content URL. You use the key query string parameter to indicate how you are specifying the site, as shown in the URIs.\n\n1. DELETE /api/api-version/sites/site-id\n1. DELETE /api/api-version/sites/site-name?key=name\n1. DELETE /api/api-version/sites/content-url?key=contentUrl\n\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site to delete.\n* site-name  The name of the site to delete. If you specify a site name, you must also include the parameter key=name.\n* content-url  The URL of the site to delete. If you specify a content URL, you must also include the parameter key=contentUrl. \n"
          },
          "response": []
        },
        {
          "name": "Sites: Query Views for Site",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "var error = !(responseCode.code===200)",
                  "if (error){",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "else",
                  "{",
                  "",
                  "    tests[\"View for site retrieved. \"] = true",
                  " ",
                  "    ",
                  "}",
                  ""
                ],
                "id": "75a02dbb-5e0c-46d3-bc3f-8f146ef52490"
              }
            }
          ],
          "_postman_id": "b73fe795-0f27-48af-937c-ea6de23c09c8",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": {
              "raw": "http://{{server}}/api/{{api}}/sites/{{siteId}}/views?includeUsageStatistics=true&pageSize=100&pageNumber=1",
              "protocol": "http",
              "host": [
                "{{server}}"
              ],
              "path": [
                "api",
                "{{api}}",
                "sites",
                "{{siteId}}",
                "views"
              ],
              "query": [
                {
                  "key": "includeUsageStatistics",
                  "value": "true"
                },
                {
                  "key": "pageSize",
                  "value": "100"
                },
                {
                  "key": "pageNumber",
                  "value": "1"
                }
              ]
            },
            "description": "Query Tableau Site by Name\n\nURIs\n1. GET /api/api-version/sites/site-id/views\n\n1. GET /api/api-version/sites/views?includeUsageStatistics=get-usage-information\n\n1. GET /api/api-version/sites/site-id/views?pageSize=page-size&pageNumber=page-number\n\n1. GET /api/api-version/sites/site-id/views?includeUsageStatistics=get-usage-information&pageSize=page-size&pageNumber=page-number\n\nParameter Values\napi-version  The version of the API to use, such as 2.2. For more information, see REST API Versions.\n\nsite-id  The ID of the site that contains the views.\n\n(Optional) get-usage-information  (Optional) true to return usage statistics. The default is false.\n\npage-size  (Optional) The number of items to return in one response. The minimum is 1. The maximum is 1000. The default is 100. For more information, see Paginating Results.\n\npage-number  (Optional) The offset for paging. The default is 1. For more information, see Paginating Results."
          },
          "response": []
        }
      ],
      "_postman_id": "c706a055-1293-4fbb-9a51-33b4a3e9924c"
    },
    {
      "name": "Subscriptions",
      "item": [
        {
          "name": "Subscriptions: Create Subscription",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "if (responseCode.code === 201) ",
                  "{",
                  "    postman.setEnvironmentVariable(\"subscriptionId\", json.tsResponse.subscription.$.id);",
                  "",
                  "",
                  "    tests[\"Created: subscription with Id: \" + postman.getEnvironmentVariable(\"subscriptionId\")] = true;",
                  "",
                  "    tests[\"subscriptionId env variable set = \" + postman.getEnvironmentVariable(\"subscriptionId\")] = true;",
                  "",
                  "",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript",
                "id": "ae26d640-caa6-422b-9fe2-bcda6942deb8"
              }
            }
          ],
          "_postman_id": "436c0e1c-915e-420e-993e-d2013878e148",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              },
              {
                "key": "Content-Type",
                "value": "text/xml"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest>\n  <subscription subject=\"CustomViewTest2\">\n    <content type=\"View\" id=\"775a9145-3c81-426a-9474-78ea2b07592b\" customizedViewId=\"24\" />\n    <schedule id=\"2814796d-7603-409d-b10d-20a2d3df2032\" />\n    <user id=\"fae9f0f0-98a4-4244-ae0c-d7e35764a588\" />\n  </subscription>\n</tsRequest>",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/subscriptions",
            "description": "Creates a new subscription to a view or workbook for a specific user. When a user is subscribed to the content, Tableau Server sends the content to the user in email on the schedule that's defined in Tableau Server and specified in this call.\n\nFor more information, see Quick Start: Subscribe to Favorite Views in the Tableau Server documentation.\n\n**Note:** After you create a resource, the server updates its search index. If you make a query immediately to see a new resource, the query results might not be up to date.\n\n\nURI\n1. POST /api/api-version/sites/site-id/subscriptions\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site to create the subscription in.\n\nAttributes\n* subscription-subject  A description for the subscription. This description is displayed when users list subscriptions for a site in the server environment. A description is required.\n* content-type  Workbook to create a subscription for a workbook, or View to create a subscription for a view.\n* content-id  The ID of the workbook or view to subscribe to.\n* schedule-id  The ID of a schedule to associate the subscription with. To determine what schedules are available, call Query Schedules.\n* user-id  The ID of the user to create the subscription for.\n**Note:** The user must have an email address defined in Tableau Server."
          },
          "response": []
        },
        {
          "name": "Subscriptions: Query Subscriptions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "if (responseCode.code===200) {",
                  "    tests[\"Subscriptions retrieved\"] = true;",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}"
                ],
                "type": "text/javascript",
                "id": "862438b3-4ece-4567-b148-962e8ab7052d"
              }
            }
          ],
          "_postman_id": "4ae3baad-a019-4c80-909b-4605ebd40872",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/xml"
              }
            ],
            "url": "{{protocol}}://{{server}}/api/{{api}}/sites/{{siteId}}/subscriptions",
            "description": "Returns a list of all the subscriptions on the specified site.\n\n**Note:** After you create a resource, the server updates its search index. If you make a query immediately to see a new resource, the query results might not be up to date.\n\n\nURI\n1. GET /api/api-version/sites/site-id/subscriptions\n1. GET /api/api-version/sites/site-id/subscriptions?pageSize=page-size&pageNumber=page-number\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site to create the subscription in.\n* page-size  (Optional) The number of items to return in one response. The minimum is 1. The maximum is 1000. The default is 100. For more information, see Paginating Results.\n* page-number  (Optional) The offset for paging. The default is 1. For more information, see Paginating Results.\n"
          },
          "response": []
        },
        {
          "name": "Subscriptions: Query Subscription",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "if (responseCode.code===200) {",
                  "    tests[\"Subscription retrieved\"] = true;",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "01be384b-a3ba-46ad-8908-a1f09da829e0"
              }
            }
          ],
          "_postman_id": "16dd5d0d-3f89-4dbb-a027-616159d132f9",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              },
              {
                "key": "Content-Type",
                "value": "text/xml"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/subscriptions/{{subscriptionId}}",
            "description": "Returns information about the specified subscription.\n\n**Note:** After you create a resource, the server updates its search index. If you make a query immediately to see a new resource, the query results might not be up to date.\n\n\nURI\n1. GET /api/api-version/sites/site-id/subscriptions/subscription-id\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site to create the subscription in.\n* subscription-id  The ID of the subscription to get information for.\n"
          },
          "response": []
        },
        {
          "name": "Subscriptions: Update Subscription",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "if (responseCode.code===200) {",
                  "    tests[\"Updated: Subscription\"] = true;",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "98d3f4b0-f953-414b-a148-58832b9dd08a"
              }
            }
          ],
          "_postman_id": "7b0a7623-983e-464c-a0e2-1e1c80100ebf",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              },
              {
                "key": "Content-Type",
                "value": "text/xml"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest>\n  <subscription subject=\"MODIFIED by the REST API\" >\n </subscription>\n</tsRequest>",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/subscriptions/{{subscriptionId}}",
            "description": "Modifies an existing subscription, allowing you to change the subject or schedule for the subscription.\n\n**Note:** After you create a resource, the server updates its search index. If you make a query immediately to see a new resource, the query results might not be up to date.\n\n\nURI\n1. PUT /api/api-version/sites/site-id/subscriptions/subscription-id\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site to create the subscription in.\n* subscription-id  The ID of the subscription to get information for.\n\n\nAttributes\n* new-subscription-subject  (Optional) A new subject for the subscription.\n* new-schedule-id  (Optional) The ID of a schedule to associate this subscription with.\n"
          },
          "response": []
        },
        {
          "name": "Subscriptions: Delete Subscription",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "if (responseCode.code===204) {",
                  "    tests[\"Deleted: Subscription\"] = true;",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "aad8ba57-2197-4890-b2a3-397de675caab"
              }
            }
          ],
          "_postman_id": "d02a60bc-83ec-4dde-8ae3-862b75e8a29f",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest>\n  <subscription subject=\"MODIFIED by the REST API\" >\n </subscription>\n</tsRequest>",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/subscriptions/{{subscriptionId}}",
            "description": "Deletes the specified subscription.\n\n**Note:** After you create a resource, the server updates its search index. If you make a query immediately to see a new resource, the query results might not be up to date.\n\n\nURI\n1. DELETE /api/api-version/sites/site-id/subscriptions/subscription-id\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site to create the subscription in.\n* subscription-id  The ID of the subscription to get information for.\n\n"
          },
          "response": []
        }
      ],
      "_postman_id": "5dbd84d3-9bcc-47c5-bf31-b0c9c5430440"
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "User Management: Query Users On Site",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code===200) {",
                  "    tests[\"User list received\"] = true;",
                  "    tests[\"Please select userId and userName for subsequent calls\"] = false;",
                  "}",
                  "else if (responseCode.code===401) ",
                  "{",
                  "    tests[\"Please sign in.\"] = false;",
                  "}",
                  ""
                ],
                "id": "b4c29053-7b58-4926-a1fb-bc48314fd469"
              }
            }
          ],
          "_postman_id": "0625044f-9f47-4e0e-9fe6-3efe0308da5a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/users",
            "description": "Get all users in site\n\nURIs\n1. GET /api/api-version/sites/site-id/users\n1. GET /api/api-version/sites/site-id/users?filter=filter-expression\n1. GET /api/api-version/sites/site-id/users?sort=sort-expression\n1. GET /api/api-version/sites/site-id/users?pageSize=page-size&pageNumber=page-number\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the users.\n* filter-expression  (Optional) An expression that lets you specify a subset of users to return. You can filter on predefined fields such as name and lastLogin. You can include multiple filter expressions. For more information, see Filtering and Sorting.\n* sort-expression  (Optional) An expression that lets you specify the order in which user information is returned. If you do not specify a sort expression, the sort order of the information that's returned is undefined. For more information, see Filtering and Sorting.\n* page-size  (Optional) The number of items to return in one response. The minimum is 1. The maximum is 1000. The default is 100. For more information, see Paginating Results.\n* page-number  (Optional) The offset for paging. The default is 1. For more information, see Paginating Results.\n"
          },
          "response": []
        },
        {
          "name": "User Management: Query User on Site",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code===200) {",
                  "    tests[\"User retrieved.\"] = true;",
                  "}",
                  "else if (responseCode.code===401) ",
                  "{",
                  "    tests[\"Please sign in.\"] = false;",
                  "}",
                  ""
                ],
                "id": "62f6d548-b9ec-4277-a1d6-e165df008ebd"
              }
            }
          ],
          "_postman_id": "6849eae3-3b36-4c1f-9ed0-e62d42c98618",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/users/{{userId}}",
            "description": "Returns info about the specified user"
          },
          "response": []
        },
        {
          "name": "User Management: Add user to site",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "//Initialize the environment variables if they don't exist",
                  "if (postman.getEnvironmentVariable(\"userId\")==undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"userId\", \"notSet\");",
                  "}",
                  "if (postman.getEnvironmentVariable(\"userName\")==undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"userName\", \"notSet\");",
                  "}",
                  "",
                  "if (responseCode.code === 201) ",
                  "{",
                  "    postman.setEnvironmentVariable(\"userId\", json.tsResponse.user.$.id);",
                  "    postman.setEnvironmentVariable(\"userName\", json.tsResponse.user.$.name);",
                  "",
                  "    tests[\"Added: user with Name: \" + postman.getEnvironmentVariable(\"userName\") + \" and Id: \" + postman.getEnvironmentVariable(\"userId\")] = true;",
                  "",
                  "    tests[\"userId env variable set = \" + postman.getEnvironmentVariable(\"userId\")] = true;",
                  "    tests[\"userName env variable set = \" + postman.getEnvironmentVariable(\"userName\")] = true;",
                  "    ",
                  "",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "95445c94-c204-4eb4-aebc-551bc6b3f28b"
              }
            }
          ],
          "_postman_id": "821a9ccf-b63f-4031-9947-6799d5b53dd2",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "x-tableau-auth",
                "value": "{{token}}"
              },
              {
                "key": "Content-Type",
                "value": "text/xml"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest>\n  <user name=\"TESTUSER\"\n    siteRole=\"Viewer\" />\n</tsRequest>",
              "options": {
                "raw": {}
              }
            },
            "url": "rgoldin-vm10/api/{{api}}/sites/{{siteId}}/users",
            "description": "Adds a user to Tableau Server and assigns the user to the specified site.\nIf Tableau Server is configured to use local authentication, the information you specify is used to create a new user in Tableau Server. To set a full name, password, and email address for the user, call Update User after creating the user.\nIf Tableau Server is configured to use Active Directory for authentication, the user you specify is imported from Active Directory into Tableau Server.\nIf you try to add a user using a specific site role but you have already reached the limit on the number of licenses for your users, the user is added as an unlicensed user. In that case, the response code is 201 (which indicates success), but the siteRole value in the response body is set to Unlicensed."
          },
          "response": []
        },
        {
          "name": "User Management: Remove User from Site",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "if (responseCode.code == 204) {",
                  "    tests[\"Deleted: user with name: \" + postman.getEnvironmentVariable(\"userName\") + \" and Id: \" + postman.getEnvironmentVariable(\"userId\") ] = true;",
                  "    postman.setEnvironmentVariable(\"userId\", \"notSet\");",
                  "    postman.setEnvironmentVariable(\"userName\", \"notSet\");  ",
                  "    tests[\"UsuserId env variable set = \" + postman.getEnvironmentVariable(\"userId\")] = (postman.getEnvironmentVariable(\"userId\")===\"notSet\");",
                  "    tests[\"userName env variable set = \" + postman.getEnvironmentVariable(\"userName\")] = (postman.getEnvironmentVariable(\"userName\")===\"notSet\");",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  ""
                ],
                "id": "f0076c62-9cdc-4507-8c6c-e87b24a783c6"
              }
            }
          ],
          "_postman_id": "034e3d20-d861-4440-a5e7-bf0e9dd71184",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/users/{{userId}}",
            "description": "Removes a user from the specified site. If a user still owns content (assets) on Tableau Server, the user cannot be deleted unless the ownership is reassigned first.\nIf a user is removed from all sites that the user is a member of, the user is deleted.\n\nURI\n1.  DELETE /api/api-version/sites/site-id/users/user-id\n\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the user.\n* user-id  The ID of the user to remove."
          },
          "response": []
        },
        {
          "name": "User Management: Query Workbooks for a User",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code===200) {",
                  "    tests[\"Workbooks for the user retrieved.\"] = true;",
                  "}",
                  "else if (responseCode.code===401) ",
                  "{",
                  "    tests[\"Please sign in.\"] = false;",
                  "}",
                  ""
                ],
                "id": "7d2c6194-a869-4c8b-8973-009059bb44c4"
              }
            }
          ],
          "_postman_id": "51d574bd-bdac-4025-8b0a-6e97cd9689ee",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/users/{{userId}}/workbooks",
            "description": "Get a list of workbooks owned by a specific user"
          },
          "response": []
        },
        {
          "name": "User Management: Update User",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code===200) {",
                  "    tests[\"Updated: User\"] = true;",
                  "}",
                  "else if (responseCode.code===401) ",
                  "{",
                  "    tests[\"Please sign in.\"] = false;",
                  "}",
                  ""
                ],
                "id": "3596a4fa-4d1b-4ba3-a333-645395db638b"
              }
            }
          ],
          "_postman_id": "90ed2b39-ef0e-4c59-8397-c74f7fb7e567",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest>\n <user fullName=\"AmyK\"\n    email=\"AmyK@Amy.com\"\n    password=\"AmyK\"\n    siteRole=\"Publisher\" />\n</tsRequest>",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/users/{{userId}}",
            "description": "Modifies information about the specified user.\nIf Tableau Server is configured to use local authentication, you can update the user's name, email address, password, or site role.\nIf Tableau Server is configured to use Active Directory for authentication, you can change the user's display name (full name), email address, and site role. However, if you synchronize the user with Active Directory, the display name and email address will be overwritten with the information that's in Active Directory.\n\nURI \n1.  PUT /api/api-version/sites/site-id/users/user-id\n\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the user.\n* user-id  The ID of the user to update.\n\n\nAttributes\n* new-full-name  (Optional) The new name for the user. Users can change names without affecting the groups they belong to.\n* new-email  (Optional) The new email address for the user.\n* new-password  (Optional) The new password for the user.\n* new-site-role  (Optional) The new site role. Valid role names are Interactor, Publisher, SiteAdministrator, Unlicensed, UnlicensedWithPublish, Viewer, and ViewerWithPublish.\n**Note:** You cannot use the REST API to set a user to be a server administrator (ServerAdministrator site role).\n* new-auth-setting  (Optional) The new authentication type for the user. You can assign the following values for this attribute: SAML (the user signs in using SAML) or ServerDefault (the user signs in using the authentication method that's set for the server). These values appear on the User page in Tableau Online—the SAML attribute value corresponds to Single sign-on, and the ServerDefault value corresponds to TableauID.\n**Note:** This setting is available only if you are using Tableau Online."
          },
          "response": []
        },
        {
          "name": "User Management: Add User to Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "",
                  "",
                  "if (responseCode.code === 200) ",
                  "{",
                  "    tests[\"Updated: Added users to group : \" + postman.getEnvironmentVariable(\"groupName\") + \" and Id: \" + postman.getEnvironmentVariable(\"groupId\")] = true;",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "0d363901-1673-4238-83d2-b06288057c68"
              }
            }
          ],
          "_postman_id": "1a697a3e-721d-4c86-b9b2-143b1a3c5649",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest>\n  <user id=\"{{userId}}\" />\n</tsRequest>",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/groups/{{groupId}}/users",
            "description": "Adds a user to the specified group.\n\n**NOTE: ** \nNote: After you create a resource, the server updates its search index. If you make a query immediately to see a new resource, the query results might not be up to date.\n\nURI\n1. POST /api/api-version/sites/site-id/groups/group-id/users\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the group.\n* group-id  The ID of the group to add the user to."
          },
          "response": []
        },
        {
          "name": "User Management: Get Users in Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code===200) {",
                  "    tests[\"Users in group retrieved.\"] = true;",
                  "}",
                  "else if (responseCode.code===401) ",
                  "{",
                  "    tests[\"Please sign in.\"] = false;",
                  "}",
                  ""
                ],
                "id": "1f8dd381-b7dc-4243-ae45-1c5f52f938fc"
              }
            }
          ],
          "_postman_id": "232291b1-9498-47c1-9e19-856c9ada54e2",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/groups/{{groupId}}/users/",
            "description": "List all the users is a specific group\n\nURIs\n1. GET /api/api-version/sites/site-id/groups/group-id/users\n1. GET /api/api-version/sites/site-id/groups/group-id/users?pageSize=page-size&pageNumber=page-number\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the group.\n* group-id  The ID of the group to get the users for.\n* page-size  (Optional) The number of items to return in one response. The minimum is 1. The maximum is 1000. The default is 100. For more information, see Paginating Results.\n* page-number  (Optional) The offset for paging. The default is 1. For more information, see Paginating Results."
          },
          "response": []
        },
        {
          "name": "User Management: Remove User from Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "if (responseCode.code == 204) {",
                  "    tests[\"Removed: user with name: \" + postman.getEnvironmentVariable(\"userName\") + \" and Id: \" + postman.getEnvironmentVariable(\"userId\") + \"from group: \" + postman.getEnvironmentVariable(\"groupId\")] = true;",
                  "    tests[\"UsuserId env variable set = \" + postman.getEnvironmentVariable(\"userId\")] = (postman.getEnvironmentVariable(\"userId\")!==\"notSet\");",
                  "    tests[\"userName env variable set = \" + postman.getEnvironmentVariable(\"userName\")] = (postman.getEnvironmentVariable(\"userName\")!==\"notSet\");",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  ""
                ],
                "id": "e2e2f051-85c8-4099-be2e-913d31565666"
              }
            }
          ],
          "_postman_id": "a0ca298f-a35e-4914-a4ee-9e7e28eac372",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/groups/{{groupId}}/users/{{userId}}",
            "description": "Remove a specific user from a group"
          },
          "response": []
        }
      ],
      "_postman_id": "7c27d496-d613-4985-93a4-2e55322ed7b9"
    },
    {
      "name": "Workbook Permissions",
      "item": [
        {
          "name": "Workbook Management: Query Workbook Permissions ",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "if (responseCode.code===200) {",
                  "    tests[\"Workbook permissions retrieved\"] = true;",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "4fc383e8-263a-4dde-b294-b74eae5588ca"
              }
            }
          ],
          "_postman_id": "9a02979b-7b8f-4be9-99df-314516906ff5",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/workbooks/{{workbookId}}/permissions",
            "description": "Returns a list of permissions for the specific workbook.\n\nURI\n1. GET /api/api-version/sites/site-id/workbooks/workbook-id/permissions\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the workbook.\n* datasource-id  The ID of the workbook to get permissions for."
          },
          "response": []
        },
        {
          "name": "Workbook Management: Delete Workbook Permission",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "if (responseCode.code===204) {",
                  "    tests[\"Deleted: Workbook permissions\"] = true;",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "bc6c7bc2-07b7-4c86-9ffb-a36e56989220"
              }
            }
          ],
          "_postman_id": "66d92445-f62c-4da6-b8de-4cf9dd7c8cb6",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/workbooks/{{workbookId}}/permissions/users/{{userId}}/write/allow",
            "description": "Deletes the specified permission from the specified workbook for a group or user.\n\nURI\n1. DELETE /api/api-version/sites/site-id/workbooks/workbook-id/permissions/groups/group-id/capability-name/capability-mode\n1. DELETE /api/api-version/sites/site-id/workbooks/workbook-id/permissions/users/user-id/capability-name/capability-mode\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the workbook.\n* workbook-id  The ID of the workbook to remove the permission for.\n* group-id  The ID of the group to remove the permission for.\n* user-id  The ID of the user to remove the permission for.\n* capability-name  \nThe capability to remove the permission for. Valid capabilities for a workbook are AddComment, ChangeHierarchy, ChangePermissions, Delete, ExportData, ExportImage, ExportXml, Filter, Read (view), ShareView, ViewComments, ViewUnderlyingData, WebAuthoring, and Write.\nFor more information, see Permissions.\n* capability-mode  Allow to remove the allow permission, or Deny to remove the deny permission. This value is case sensitive."
          },
          "response": []
        },
        {
          "name": "Workbook Management: Add Workbook Permissions",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "if (responseCode.code===200) {",
                  "    tests[\"Updated: Workbook permissions\"] = true;",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "",
                  "",
                  ""
                ],
                "id": "ff21f3c7-bb29-44e6-bdfe-36e85f7e12cb"
              }
            }
          ],
          "_postman_id": "66c843c0-1a1f-4e16-9354-2489dd0ef7f7",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              },
              {
                "key": "Content-Type",
                "value": "text/xml"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest>\n  <permissions>\n    <workbook id=\"{{workbookId}}\" />\n    <granteeCapabilities>\n      <user id=\"{{userId}}\" />\n      <capabilities>\n        <capability name=\"Read\" mode=\"Allow\" />\n        <capability name=\"ExportImage\" mode=\"Allow\" />\n      </capabilities>\n    </granteeCapabilities>\n    <granteeCapabilities>\n      <group id=\"{{groupId}}\" />\n      <capabilities>\n        <capability name=\"ViewComments\" mode=\"Allow\" />\n      </capabilities>\n    </granteeCapabilities>\n  </permissions>\n</tsRequest>",
              "options": {
                "raw": {}
              }
            },
            "url": "{{server}}/api/{{api}}/sites/{{siteId}}/workbooks/{{workbookId}}/permissions",
            "description": "Adds permissions to the specified workbook for a Tableau Server user or group. You can specify multiple sets of permissions using one call.\n\nURI\n1. PUT /api/api-version/sites/site-id/workbooks/workbook-id/permissions\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the project.\n* workbook-id  The ID of the workbook to set permissions for.\n\nAttributes\n* \nworkbook-id  The <workbook> element is not required, but can be included for compatibility with earlier versions of the REST API. If the <workbook> element is included, the workbook-id value must match the workbook ID in the URI. Any other attributes in the <workbook> element are ignored.\n* user-id  The ID (not name) of the user to add permissions for.\n* group-id  The ID (not name) of the group to add permissions for.\n* capability-name  \nThe capability to assign. If any capability has already been granted or denied for a specified user or group, that capability is ignored. Valid capabilities for a workbook are AddComment, ChangeHierarchy, ChangePermissions, Delete, ExportData, ExportImage, ExportXml, Filter, Read (view), ShareView, ViewComments, ViewUnderlyingData, WebAuthoring, and Write.\nFor more information, see Permissions.\n* capability-mode  Allow to allow the capability, or Deny to deny it. This value is case sensitive."
          },
          "response": []
        }
      ],
      "_postman_id": "e7c199b8-1d67-4451-af76-adc0aa170a27"
    },
    {
      "name": "Workbook Views",
      "item": [
        {
          "name": "Workbook Management: Query View with Preview Image",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code===200) {",
                  "    tests[\"View with preview image retrieved.\"] = true;",
                  "}",
                  "else if (responseCode.code===401) ",
                  "{",
                  "    tests[\"Please sign in.\"] = false;",
                  "}",
                  ""
                ],
                "id": "3430bf9e-e356-4341-a1c0-c45cf2af3a02"
              }
            }
          ],
          "_postman_id": "8217b20b-fd16-4252-9bbb-ad20871e2492",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/workbooks/{{workbookId}}/views/{{viewId}}/previewImage",
            "description": "Get a preview image of a workbook's view"
          },
          "response": []
        },
        {
          "name": "Workbook Management: Query Views for a Workbook",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "//Initialize the environment variables if they don't exist",
                  "if (postman.getEnvironmentVariable(\"viewId\")==undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"viewId\", \"notSet\");",
                  "}",
                  "",
                  "var error = !(responseCode.code===200)",
                  "if (error){",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "else",
                  "{",
                  "",
                  "    tests[\"Views retrieved.  Please set the following values MANUALLY to use in subsequent API calls\"] = true",
                  "    tests[\"viewId env variable set = \" + postman.getEnvironmentVariable(\"viewId\")] = !(postman.getEnvironmentVariable(\"viewId\")===\"notSet\");",
                  "",
                  "}",
                  ""
                ],
                "id": "e44aa910-93de-42b7-94c8-751bb545672f"
              }
            }
          ],
          "_postman_id": "092f24e1-e586-4ff8-871e-a466c429ba15",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": {
              "raw": "http://{{server}}/api/{{api}}/sites/{{siteId}}/workbooks/{{workbookId}}/views/?includeUsageStatistics=true",
              "protocol": "http",
              "host": [
                "{{server}}"
              ],
              "path": [
                "api",
                "{{api}}",
                "sites",
                "{{siteId}}",
                "workbooks",
                "{{workbookId}}",
                "views",
                ""
              ],
              "query": [
                {
                  "key": "includeUsageStatistics",
                  "value": "true"
                }
              ]
            },
            "description": "Get a list of views in a Workbook\n\nURI\n1. GET /api/api-version/sites/site-id/workbooks/workbook-id/views\n1. GET /api/api-version/sites/site-id/workbooks/workbook-id/views?includeUsageStatistics=get-usage-information\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the workbook.\n* workbook-id  The ID of the workbook to get the views for.\n* (Optional) get-usage-information  true to return usage statistics. The default is false."
          },
          "response": []
        },
        {
          "name": "Workbook Management: Query Views for a Workbook with Usage Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "//Initialize the environment variables if they don't exist",
                  "if (postman.getEnvironmentVariable(\"viewId\")==undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"viewId\", \"notSet\");",
                  "}",
                  "",
                  "var error = !(responseCode.code===200)",
                  "if (error){",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "else",
                  "{",
                  "",
                  "    tests[\"Views with usage statistics retrieved.  Please set the following values MANUALLY to use in subsequent API calls\"] = true",
                  "    tests[\"viewId env variable set = \" + postman.getEnvironmentVariable(\"viewId\")] = !(postman.getEnvironmentVariable(\"viewId\")===\"notSet\");",
                  "",
                  "}",
                  ""
                ],
                "id": "26184f2b-bae1-4c30-9479-666d4d267252"
              }
            }
          ],
          "_postman_id": "817e9648-e852-4d03-98ed-efdf4a400f03",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": {
              "raw": "http://{{server}}/api/{{api}}/sites/{{siteId}}/workbooks/{{workbookId}}/views?includeUsageStatistics=true",
              "protocol": "http",
              "host": [
                "{{server}}"
              ],
              "path": [
                "api",
                "{{api}}",
                "sites",
                "{{siteId}}",
                "workbooks",
                "{{workbookId}}",
                "views"
              ],
              "query": [
                {
                  "key": "includeUsageStatistics",
                  "value": "true"
                }
              ]
            },
            "description": "Get a list of views in a Workbook, including view counts"
          },
          "response": []
        }
      ],
      "_postman_id": "4e687d67-203e-4e0b-a353-6895a71d4c54"
    },
    {
      "name": "Workbooks",
      "item": [
        {
          "name": "Workbook Management: Query Workbook",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code===200) {",
                  "    tests[\"Workbook information received\"] = true;",
                  "}",
                  "else if (responseCode.code===401) ",
                  "{",
                  "    tests[\"Please sign in.\"] = false;",
                  "}",
                  ""
                ],
                "id": "f888bcb7-4750-4a65-a853-f3c3a1d59531"
              }
            }
          ],
          "_postman_id": "760b200c-3297-450d-9d45-11a8420ec17d",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/workbooks/{{workbookId}}",
            "description": "Get the details of a specific workbok"
          },
          "response": []
        },
        {
          "name": "Workbook Management: Query Workbooks for Site",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "//Initialize the environment variables if they don't exist",
                  "if (postman.getEnvironmentVariable(\"workbookId\")===undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"workbookId\", \"notSet\");",
                  "}",
                  "if (postman.getEnvironmentVariable(\"workbookName\")===undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"workbookName\", \"notSet\");",
                  "}",
                  "if (postman.getEnvironmentVariable(\"contentUrl\")===undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"contentUrl\", \"notSet\");",
                  "}",
                  "",
                  "",
                  "var error = (responseCode.code!==200)",
                  "if (error){",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "else",
                  "{",
                  "",
                  "    tests[\"workbookId env variable set = \" + postman.getEnvironmentVariable(\"workbookId\")] = (postman.getEnvironmentVariable(\"workbookId\")!==\"notSet\");",
                  "    tests[\"workbookName env variable set = \" + postman.getEnvironmentVariable(\"workbookName\")] = (postman.getEnvironmentVariable(\"workbookName\")!==\"notSet\");",
                  "    tests[\"contentUrl env variable set = \" + postman.getEnvironmentVariable(\"contentUrl\")] = (postman.getEnvironmentVariable(\"contentUrl\")!==\"notSet\");",
                  "    ",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "id": "b2f6e886-e4d2-487b-b497-f39576c3d96e"
              }
            }
          ],
          "_postman_id": "3dc9912d-4b1a-4f3d-af8c-17f05fe30d7a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "{{protocol}}://{{server}}/api/{{api}}/sites/{{siteId}}/workbooks",
            "description": "Returns the workbooks on a site.\nIf the user is not an administrator, the method returns just the workbooks that the user has permissions to view.\n\nURI's\n1. GET /api/api-version/sites/site-id/workbooks\n1. GET /api/api-version/sites/site-id/workbooks?filter=filter-expression\n1. GET /api/api-version/sites/site-id/workbooks?sort=sort-expression\n1. GET /api/api-version/sites/site-id/workbooks?pageSize=page-size&pageNumber=page-number\n\nParameter Values\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the workbooks.\n* filter-expression  (Optional) An expression that lets you specify a subset of workbooks to return. You can filter on predefined fields such as name, tags, and createdAt. You can include multiple filter expressions. For more information, see Filtering and Sorting.\n* sort-expression  (Optional) An expression that lets you specify the order in which workbook information is returned. If you do not specify a sort expression, the sort order of the information that's returned is undefined. For more information, see Filtering and Sorting.\n* page-size  (Optional) The number of items to return in one response. The minimum is 1. The maximum is 1000. The default is 100. For more information, see Paginating Results.\n* page-number  (Optional) The offset for paging. The default is 1. For more information, see Paginating Results.\n"
          },
          "response": []
        },
        {
          "name": "Workbook Management: Query Workbook with a Preview Image",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code===200) {",
                  "    tests[\"Workbook with preview image received\"] = true;",
                  "}",
                  "else if (responseCode.code===401) ",
                  "{",
                  "    tests[\"Please sign in.\"] = false;",
                  "}",
                  ""
                ],
                "id": "842a4eb9-fdfe-4f83-b26b-ddd3608361a5"
              }
            }
          ],
          "_postman_id": "dd0a9e8f-cadd-4713-88df-6481a56eeb5f",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": {
              "raw": "http://{{server}}/api/{{api}}/sites/{{siteId}}/workbooks/0ebd8bd5-5cfb-44cf-91da-751c5c4d8017?previewImage=true",
              "protocol": "http",
              "host": [
                "{{server}}"
              ],
              "path": [
                "api",
                "{{api}}",
                "sites",
                "{{siteId}}",
                "workbooks",
                "0ebd8bd5-5cfb-44cf-91da-751c5c4d8017"
              ],
              "query": [
                {
                  "key": "previewImage",
                  "value": "true"
                }
              ]
            },
            "description": "Get the details of a specific workbook, including a preview image."
          },
          "response": []
        },
        {
          "name": "Workbook Management: Add Tags to a Workbook",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code===200) {",
                  "    tests[\"Added: Tags\"] = true;",
                  "}",
                  "else if (responseCode.code===401) ",
                  "{",
                  "    tests[\"Please sign in.\"] = false;",
                  "}",
                  ""
                ],
                "id": "4eddca90-833d-4383-8f4a-010dba665607"
              }
            }
          ],
          "_postman_id": "149a5fc8-89b0-4e18-97cc-0ae2a4d70a2f",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              },
              {
                "key": "Content-Type",
                "value": "text/xml"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest> \n    <tags> \n      <tag label=\"Tagged_by_the_REST_API\" /> \n      <tag label=\"tag2\" />\n    </tags> \n</tsRequest>\n",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/workbooks/{{workbookId}}/tags",
            "description": "Add one or more tags to a workbook\n\nURI\n1. PUT /api/api-version/sites/site-id/workbooks/workbook-id/tags\n\nURI Parameters\n* -version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the workbook.\n* workbook-id  The ID of the workbook to add tags to.\n\n\nAttribute Values\n* workbook-id  The workbook to add the tag to. If the workbook is already tagged with a tag that's included in the request body, those tags are ignored and the workbook retains them. If the <tags> element is empty, no new tags are added to the workbook.\n* tag  The text of the tag.\n\n\nTableau Server users who are not server administrators or site administrators can call this method only if they have Read permissions for the workbook (either explicitly or implicitly)."
          },
          "response": []
        },
        {
          "name": "Workbook Management: Delete Tag from a Workbook",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "//Initialize the environment variables if they don't exist",
                  "if (postman.getEnvironmentVariable(\"tag\")==undefined)",
                  "{",
                  "    postman.setEnvironmentVariable(\"tag\", \"notSet\");",
                  "}",
                  "",
                  "var error = !(responseCode.code===204)",
                  "if (error){",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "else",
                  "{",
                  "    //These lines have been commented out because they would likely select the Default project and we don't want to accidentally delete that",
                  "    //postman.setEnvironmentVariable(\"projectId\", json.tsResponse.projects.project[0].$.id);",
                  "    //postman.setEnvironmentVariable(\"projectName\", json.tsResponse.projects.project[0].$.name);",
                  "    ",
                  "    tests[\"Deleted: Tag \" + postman.getEnvironmentVariable(\"tag\")] = responseCode.code===204 ",
                  "    postman.setEnvironmentVariable(\"tag\", \"notSet\");",
                  "    tests[\"tag env variable set = \" + postman.getEnvironmentVariable(\"tag\")] = !(postman.getEnvironmentVariable(\"tag\")===\"notSet\");",
                  "      ",
                  "}",
                  ""
                ],
                "id": "cfa0093f-021a-4ead-a838-fea255bc80f7"
              }
            }
          ],
          "_postman_id": "7b4fff3f-6f30-483b-a68c-fb96e642f211",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/workbooks/{{workbookId}}/tags/{{tag}}",
            "description": "Delete a tag from the specified workbook\n\nURI\n1. DELETE /api/api-version/sites/site-id/workbooks/workbook-id/tags/tag-name\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the workbook.\n* workbook-id  The ID of the workbook to remove the tag from.\n* tag-name  The name of the tag to remove from the workbook.\n"
          },
          "response": []
        },
        {
          "name": "Workbook Management: Query Workbook Preview Image",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code===200) {",
                  "    tests[\"Workbook preview image received\"] = true;",
                  "}",
                  "else if (responseCode.code===401) ",
                  "{",
                  "    tests[\"Please sign in.\"] = false;",
                  "}",
                  ""
                ],
                "id": "b4ae8e8f-8129-4f3c-8c75-c156de458588"
              }
            }
          ],
          "_postman_id": "57287ef6-2a57-4016-8086-bb1d25d79442",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/workbooks/{{workbookId}}/previewImage",
            "description": "Get the thumbnail for a specific workbook\n\nURI\n1. GET /api/api-version/sites/site-id/workbooks/workbook-id/views/view-id/previewImage\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the view.\n* workbook-id  The ID of the workbook that contains the view to return a thumbnail image for.\n* view-id  The ID of the view to return a thumbnail image for."
          },
          "response": []
        },
        {
          "name": "Workbook Management: Query Workbooks for User",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code===200) {",
                  "    tests[\"Workbooks for user received\"] = true;",
                  "}",
                  "else if (responseCode.code===401) ",
                  "{",
                  "    tests[\"Please sign in.\"] = false;",
                  "}",
                  ""
                ],
                "id": "b93ed73f-4233-4f0a-90c1-ede7d4481cb1"
              }
            }
          ],
          "_postman_id": "9ded4f07-0cde-4120-bb80-0371a88d75dd",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/users/{{userId}}/workbooks",
            "description": "Query workbooks that the specified user has read capabilities for"
          },
          "response": []
        },
        {
          "name": "Workbook Management: Delete Workbook",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "var error = !(responseCode.code===204)",
                  "if (error){",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "else",
                  "{",
                  "    tests[\"Deleted: Workbook with name: \" + postman.getEnvironmentVariable(\"workbookName\") + \" and Id: \" + postman.getEnvironmentVariable(\"workbookId\")] = responseCode.code === 204;",
                  "    postman.setEnvironmentVariable(\"workbookId\", \"notSet\");",
                  "    postman.setEnvironmentVariable(\"workbookName\", \"notSet\");",
                  "    postman.setEnvironmentVariable(\"contentUrl\", \"notSet\");",
                  "",
                  "",
                  "    tests[\"workbookId env variable set = \" + postman.getEnvironmentVariable(\"workbookId\")] = (postman.getEnvironmentVariable(\"workbookId\")!==\"notSet\");",
                  "    tests[\"workbookName env variable set = \" + postman.getEnvironmentVariable(\"workbookName\")] = (postman.getEnvironmentVariable(\"workbookName\")!==\"notSet\");",
                  "    tests[\"contentUrl env variable set = \" + postman.getEnvironmentVariable(\"contentUrl\")] = (postman.getEnvironmentVariable(\"contentUrl\")!==\"notSet\");",
                  "    ",
                  "}",
                  ""
                ],
                "id": "e6f30218-731f-48cf-b762-9f6518954167"
              }
            }
          ],
          "_postman_id": "994be17a-b3e8-479b-b10a-f6541aa41235",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/workbooks/{{workbookId}}"
          },
          "response": []
        },
        {
          "name": "Workbook Management: Download Workbook",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "var error = !(responseCode.code===200)",
                  "if (error){",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  "else",
                  "{",
                  "    tests[\"Workbook downloaded.\"] = true;",
                  "}",
                  ""
                ],
                "id": "58a7bcf1-8798-4f87-9e57-3723381a6e6e"
              }
            }
          ],
          "_postman_id": "46f3f080-a6fa-4675-83b1-047ec604724c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/workbooks/{{workbookId}}/revisions/{{revisionId}}/content",
            "description": "Downloads the specified Workbook. WARNING: Don't try to download a twbx with POSTman. It will crash. Try downloading a tds that doesn't have a local file attached with it.\n\nResponse\n* One of the following, depending on the format of the workbook:\nThe workbook's content in .twb format (Content-Type: application/xml)\nThe workbook's content in .twbx format (Content-Type: application/octet-stream)\n\nURI\n1. GET /api/api-version/sites/site-id/workbooks/workbook-id/content\n \n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the workbook.\n* workbook-id  The ID of the workbook to download."
          },
          "response": []
        },
        {
          "name": "Workbook Management: Query Workbook Connections",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "",
                  "if ( responseCode.code===200)",
                  "{",
                  "    tests[\"Workbook connections retrieved.\"] = true;",
                  "    postman.setEnvironmentVariable(\"connectionId\", json.tsResponse.connections.connection.$.id);",
                  "    tests[\"connectionId env variable set = \" + postman.getEnvironmentVariable(\"connectionId\")] = true;",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  ""
                ],
                "id": "02222635-c7ca-4651-8c9d-2415465207e1"
              }
            }
          ],
          "_postman_id": "81b0d56e-c059-4d10-abf0-050629e19fee",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/workbooks/{{workbookId}}/connections",
            "description": "Lists the data connections for a specific workbook\n\nURI\n1. GET /api/api-version/sites/site-id/workbooks/workbook-id/connections\n\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the workbook.\n* workbook-id  The ID of the workbook to return connection information about."
          },
          "response": []
        },
        {
          "name": "Workbook Management: Update Workbook Connections",
          "_postman_id": "7c6208e7-1766-4c52-8acb-f680d56ec3ec",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              },
              {
                "key": "Content-Type",
                "value": "text/xml"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest>\n  <connection \n    serverAddress=\"newAddr\" \n    serverPort=\"5435\" \n    userName=\"newUserName\" \n    password=\"newPass\" \n    embedPassword=\"false\" />\n</tsRequest>",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/workbooks/{{workbookId}}/connections/{{connectionId}}",
            "description": "Updates the server address, port, username, or password for the specified workbook connection.\nAny combination of the attributes inside the <connection> element is valid. If no attributes are included, no update is made.\n\nURI\n1. PUT /api/api-version/sites/site-id/workbooks/workbook-id/connections/connection-id\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the workbook.\n* workbook-id  The ID of the workbook to update.\n* connection-id  The ID of the connection to update.\n\n\nAttributes\n* server-address  The new server for the connection.\n* port  The new port for the connection.\n* connection-username  The new username for the connection.\n* connection-password  The new password for the connection.\n* embed-password  True to embed the password; otherwise, False.\n"
          },
          "response": []
        },
        {
          "name": "Workbook Management: Update Workbook",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var json = xml2Json(responseBody);",
                  "",
                  "if ( responseCode.code===200)",
                  "{",
                  "",
                  "    tests[\"Updated: Workbook\"] = true;",
                  "}",
                  "else",
                  "{",
                  "    tests[\"error: \" + json.tsResponse.error.summary] = false; ",
                  "    tests[\"detail: \"  + json.tsResponse.error.detail] = false;",
                  "    tests[\"code: \" + json.tsResponse.error.$.code] = false;",
                  "    tests[\"full body: \" + responseBody] = false;",
                  "}",
                  ""
                ],
                "id": "f44afe95-1aee-4237-a0ed-7aa5a073dffd"
              }
            }
          ],
          "_postman_id": "11c8a033-88e7-4060-bfb1-552d4f27ca3a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "X-Tableau-Auth",
                "value": "{{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest> \n  <workbook showTabs=\"true\" > \n     <project id=\"{{projectId}}\"/> \n     <owner id=\"{{userId}}\" />\n </workbook> \n</tsRequest>",
              "options": {
                "raw": {}
              }
            },
            "url": "http://{{server}}/api/{{api}}/sites/{{siteId}}/workbooks/{{workbookId}}",
            "description": "Modifies an existing workbook, allowing you to change the owner or project that the workbook belongs to and whether the workbook shows views in tabs.\n\nURI\n1. PUT /api/api-version/sites/site-id/workbooks/workbook-id\n\n\nParameters\n* api-version  The version of the API to use, such as 2.3. For more information, see REST API Versions.\n* site-id  The ID of the site that contains the workbook.\n* workbook-id  The ID of the workbook to update.\n\n\nAttributes\n* show-tabs-flag  (Optional) Specify true to have the published workbook show views in tabs; otherwise, false. The default is false.\n* new-project-id  (Optional) The ID of a project to assign the workbook to.\n* new-owner-id  (Optional) The ID of a user to assign the workbook to as owner.\n \nAny combination of the elements inside the <workbook> element is valid. Only the attributes and child elements that are included result in updates to the data source. If no attributes or nested elements are included, no update is made.\n\nIf the <project> element is included, the id attribute must be included; other attributes of the <project> element are ignored.\n\nIf the <owner> element is included, the id attribute must be included; other attributes of the <owner> element are ignored."
          },
          "response": []
        }
      ],
      "_postman_id": "37557206-308d-4e97-8eed-74c6452d5169"
    },
    {
      "name": "Data-Driven Alerts",
      "item": [
        {
          "name": "Query Data-Driven Alerts",
          "_postman_id": "50d8dccd-a4c3-46b2-8a81-180fa5966410",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{protocol}}://{{server}}/api/{{api}}/sites/{{siteId}}/dataAlerts"
          },
          "response": []
        },
        {
          "name": "Query Data-Driven Alert Details",
          "_postman_id": "563498a1-8cf4-4b99-a8c1-8bda9385ccde",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{protocol}}://{{server}}/api/{{api}}/sites/{{siteId}}/dataAlerts/{{dataAlertId}}"
          },
          "response": []
        },
        {
          "name": "Add User to Data-Driven Alert",
          "_postman_id": "cd536c3a-b33d-49ac-9ee6-8b2832cd3773",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "<tsRequest>\n  <user id=\"{{userId}}\"/>\n</tsRequest>",
              "options": {
                "raw": {}
              }
            },
            "url": "{{protocol}}://{{server}}/api/{{api}}/sites/{{siteId}}/dataAlerts/{{dataAlertId}}/users"
          },
          "response": []
        }
      ],
      "_postman_id": "dd471cf0-207b-4536-8d78-1b50e9958b45"
    }
  ],
  "auth": {
    "type": "apikey",
    "apikey": {
      "value": "{{apiKey}}",
      "key": "X-Tableau-Auth"
    }
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "/*",
          "    - This script will automatically generate a new API Key, avoiding the need to manually sign-in.",
          "    - Every request in this collection will run this script.",
          "    - To authenticate with different users, create separate environments with username, password and content-url variables",
          "*/",
          "",
          "// xml body used to authenticate and obtain an API Key",
          "const authBody = `",
          "<tsRequest>",
          "    <credentials name=\"${pm.environment.get(\"adminUsername\")}\" password=\"${pm.environment.get(\"adminPassword\")}\">",
          "        <site contentUrl=\"${pm.environment.get(\"siteContentUrl\")}\"/>",
          "    </credentials>",
          "</tsRequest>`;",
          "",
          "// authenticate and obtain token value to be set as 'api-key' environment variable",
          "pm.sendRequest({",
          "    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"server\") + '/api/' + pm.environment.get(\"api\") + '/auth/signin',",
          "    method: 'POST',",
          "    header: {",
          "        'content-type': 'application/xml',",
          "    },",
          "    body: {",
          "        mode: 'raw',",
          "        raw: authBody,",
          "    }",
          "}, function (err, res) {",
          "    if (err) {",
          "        console.log(err);",
          "    } else {",
          "        pm.environment.unset(\"apiKey\");",
          "        // convert the XML response body to JSON",
          "        const jsonObject = xml2Json(res.text());",
          "",
          "        // obtain the API Key from the response body",
          "        const apiKey = jsonObject.tsResponse.credentials.$.token;",
          "        const siteId = jsonObject.tsResponse.credentials.site.$.id;",
          "",
          "        // set the variables to the returned value",
          "        pm.environment.set(\"apiKey\", apiKey);",
          "        pm.environment.set(\"siteId\", siteId);",
          "    };",
          "});"
        ],
        "id": "4adac1ba-5dcd-412a-b0e5-8bac5471a3a7"
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ],
        "id": "53040b62-a3ab-44fc-b5ca-cb7e6d7fd173"
      }
    }
  ]
}